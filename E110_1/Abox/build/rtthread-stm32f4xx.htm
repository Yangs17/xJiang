<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\rtthread-stm32f4xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\rtthread-stm32f4xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Mar 06 09:08:36 2020
<BR><P>
<H3>Maximum Stack Usage =       2876 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rt_sub_Abox_init_thread_entry &rArr; traverseCbox &rArr; sendCheckPack &rArr; checkDataFromSubg &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">MemManage_Handler</a><BR>
 <LI><a href="#[1f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">BusFault_Handler</a><BR>
 <LI><a href="#[20]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">UsageFault_Handler</a><BR>
 <LI><a href="#[37]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">ADC_IRQHandler</a><BR>
 <LI><a href="#[414]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[414]">netconn_drain</a><BR>
 <LI><a href="#[449]">lwip_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44a]">lwip_send</a><BR>
 <LI><a href="#[514]">judgeEthSendStatus</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[507]">quitTcpConnect</a><BR>
 <LI><a href="#[21f]">sendDataToServer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[507]">quitTcpConnect</a><BR>
 <LI><a href="#[5c1]">proc_assign_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c1]">proc_assign_expr</a><BR>
 <LI><a href="#[5c8]">proc_cast_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c8]">proc_cast_expr</a><BR>
 <LI><a href="#[5c7]">proc_unary_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c8]">proc_cast_expr</a><BR>
 <LI><a href="#[5c5]">proc_primary_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c3]">proc_expr</a><BR>
 <LI><a href="#[5c0]">proc_param_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c1]">proc_assign_expr</a><BR>
 <LI><a href="#[5a2]">finsh_type_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a2]">finsh_type_check</a><BR>
 <LI><a href="#[5a0]">finsh_compile</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a0]">finsh_compile</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[37]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56a]">Abox_thread_entry</a> from abox_exchange.o(.text) referenced from abox_exchange.o(.text)
 <LI><a href="#[1f]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[66]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[74]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[73]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">ETH_IRQHandler</a> from stm32f4xx_eth.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">EXTI0_IRQHandler</a> from wifi_board.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">EXTI15_10_IRQHandler</a> from sub_g_init.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">EXTI9_5_IRQHandler</a> from adc.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[76]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[75]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1d]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6e]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6d]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1ed]">IWDG_Feed</a> from wwdg.o(.text) referenced from wwdg.o(.text)
 <LI><a href="#[56b]">Led_box_thread_entry</a> from abox_exchange.o(.text) referenced from abox_exchange.o(.text)
 <LI><a href="#[56c]">Led_roof_thread_entry</a> from abox_exchange.o(.text) referenced from abox_exchange.o(.text)
 <LI><a href="#[1e]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[e2]">OP_add_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e4]">OP_add_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e3]">OP_add_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f1]">OP_and_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f3]">OP_and_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f2]">OP_and_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[fa]">OP_bw_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[fc]">OP_bw_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[fb]">OP_bw_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[10d]">OP_call</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e8]">OP_div_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ea]">OP_div_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e9]">OP_div_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[103]">OP_ld_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[105]">OP_ld_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[106]">OP_ld_value_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[10e]">OP_ld_value_byte_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[108]">OP_ld_value_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[110]">OP_ld_value_dword_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[107]">OP_ld_value_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[10f]">OP_ld_value_word_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[104]">OP_ld_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[eb]">OP_mod_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ed]">OP_mod_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ec]">OP_mod_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ee]">OP_mul_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f0]">OP_mul_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ef]">OP_mul_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e1]">OP_no_op</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f4]">OP_or_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f6]">OP_or_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f5]">OP_or_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[10c]">OP_pop</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[fd]">OP_shl_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ff]">OP_shl_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[fe]">OP_shl_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[100]">OP_shr_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[102]">OP_shr_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[101]">OP_shr_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[109]">OP_st_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[10b]">OP_st_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[10a]">OP_st_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e5]">OP_sub_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e7]">OP_sub_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e6]">OP_sub_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f7]">OP_xor_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f9]">OP_xor_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[f8]">OP_xor_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[68]">OTG_FS_IRQHandler</a> from usbh_usr.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[70]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[72]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[71]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[119]">SimpleLinkNetAppEventHandler</a> from cc3100.o(.text) referenced from wifi_driver.o(.constdata)
 <LI><a href="#[118]">SimpleLinkWlanEventHandler</a> from cc3100.o(.text) referenced from wifi_driver.o(.constdata)
 <LI><a href="#[24]">SysTick_Handler</a> from board.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[86]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[27]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">TIM2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">TIM3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">USART2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">USART3_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6c]">USART6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[19]">USBH_Connected</a> from usbh_core.o(.text) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[1a]">USBH_Disconnected</a> from usbh_core.o(.text) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[4]">USBH_MSC_ClassRequest</a> from usbh_msc_core.o(.text) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[5]">USBH_MSC_Handle</a> from usbh_msc_core.o(.text) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[3]">USBH_MSC_InterfaceDeInit</a> from usbh_msc_core.o(.text) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[2]">USBH_MSC_InterfaceInit</a> from usbh_msc_core.o(.text) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[18]">USBH_SOF</a> from usbh_core.o(.text) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[f]">USBH_USR_Configuration_DescAvailable</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[7]">USBH_USR_DeInit</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[e]">USBH_USR_DeviceAddressAssigned</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[8]">USBH_USR_DeviceAttached</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[a]">USBH_USR_DeviceDisconnected</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[16]">USBH_USR_DeviceNotSupported</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[c]">USBH_USR_DeviceSpeedDetected</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[d]">USBH_USR_Device_DescAvailable</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[13]">USBH_USR_EnumerationDone</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[6]">USBH_USR_Init</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[15]">USBH_USR_MSC_Application</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[10]">USBH_USR_Manufacturer_String</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[b]">USBH_USR_OverCurrentDetected</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[11]">USBH_USR_Product_String</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[9]">USBH_USR_ResetDevice</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[12]">USBH_USR_SerialNum_String</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[17]">USBH_USR_UnrecoveredError</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[14]">USBH_USR_UserInput</a> from usbh_usr.o(.text) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[20]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[117]">_SlDrvDeviceEventHandler</a> from wifi_device.o(.text) referenced from wifi_driver.o(.constdata)
 <LI><a href="#[74e]">_SlDrvMsgReadSpawnCtx</a> from wifi_driver.o(.text) referenced 2 times from wifi_driver.o(.text)
 <LI><a href="#[da]">_SlDrvNetAppEventHandler</a> from netapp.o(.text) referenced from wifi_driver.o(.text)
 <LI><a href="#[d9]">_SlDrvRxIrqHandler</a> from wifi_driver.o(.text) referenced from wifi_device.o(.text)
 <LI><a href="#[87]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[cc]">_pin_control</a> from pin.o(.text) referenced from pin.o(.text)
 <LI><a href="#[ca]">_pin_read</a> from pin.o(.text) referenced from pin.o(.text)
 <LI><a href="#[cb]">_pin_write</a> from pin.o(.text) referenced from pin.o(.text)
 <LI><a href="#[8d]">_rym_bg</a> from tofile.o(.text) referenced from tofile.o(.text)
 <LI><a href="#[8b]">_rym_end</a> from tofile.o(.text) referenced from tofile.o(.text)
 <LI><a href="#[8e]">_rym_rx_ind</a> from ymodem.o(.text) referenced from ymodem.o(.text)
 <LI><a href="#[8c]">_rym_tof</a> from tofile.o(.text) referenced from tofile.o(.text)
 <LI><a href="#[111]">_sl_HandleAsync_Accept</a> from socket.o(.text) referenced from wifi_driver.o(.constdata)
 <LI><a href="#[112]">_sl_HandleAsync_Connect</a> from socket.o(.text) referenced from wifi_driver.o(.constdata)
 <LI><a href="#[114]">_sl_HandleAsync_DnsGetHostByName</a> from netapp.o(.text) referenced from wifi_driver.o(.constdata)
 <LI><a href="#[115]">_sl_HandleAsync_DnsGetHostByService</a> from netapp.o(.text) referenced from wifi_driver.o(.constdata)
 <LI><a href="#[db]">_sl_HandleAsync_PingResponse</a> from netapp.o(.text) referenced from wifi_driver.o(.constdata)
 <LI><a href="#[db]">_sl_HandleAsync_PingResponse</a> from netapp.o(.text) referenced from wifi_driver.o(.text)
 <LI><a href="#[113]">_sl_HandleAsync_Select</a> from socket.o(.text) referenced from wifi_driver.o(.constdata)
 <LI><a href="#[116]">_sl_HandleAsync_Stop</a> from wifi_device.o(.text) referenced from wifi_driver.o(.constdata)
 <LI><a href="#[cf]">_spi_bus_device_control</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[cd]">_spi_bus_device_read</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[ce]">_spi_bus_device_write</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[d2]">_spidev_device_control</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[d0]">_spidev_device_read</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[d1]">_spidev_device_write</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[dc]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[a2]">accept_function</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[af]">arp_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[161]">chdir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[141]">cmd_clk</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[13e]">cmd_cls</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[14b]">cmd_connectInfo</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[140]">cmd_date</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[149]">cmd_debugClose</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[14a]">cmd_debugOpen</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[13a]">cmd_device</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[133]">cmd_event</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[13b]">cmd_free</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[145]">cmd_listCbox</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[152]">cmd_listReport</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[137]">cmd_mb</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[138]">cmd_mq</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[134]">cmd_mt</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[13d]">cmd_netif</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[12f]">cmd_ping</a> from ping.o(.text) referenced from ping.o(FSymTab)
 <LI><a href="#[131]">cmd_ps</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[135]">cmd_quit</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[130]">cmd_reboot</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[129]">cmd_ry</a> from tofile.o(.text) referenced from tofile.o(FSymTab)
 <LI><a href="#[132]">cmd_sem</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[136]">cmd_sendlog</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[146]">cmd_setfreq</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[14d]">cmd_setgprs</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[143]">cmd_setid</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[142]">cmd_setmdn</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[148]">cmd_setpass</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[14c]">cmd_setport</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[147]">cmd_setuser</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[14f]">cmd_sim</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[13c]">cmd_tcp</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[151]">cmd_telnet</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[144]">cmd_testflash</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[13f]">cmd_time</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[139]">cmd_timer</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[14e]">cmd_uimcode</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[150]">cmd_ver</a> from my_cmd.o(.text) referenced from my_cmd.o(FSymTab)
 <LI><a href="#[0]">configure</a> from drv_spi.o(.text) referenced 2 times from drv_spi.o(.data)
 <LI><a href="#[7a]">debug_log</a> from abox_log.o(.text) referenced from abox_log.o(.text)
 <LI><a href="#[163]">df</a> from dfs_fs.o(.text) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[122]">dfs_init</a> from dfs.o(.text) referenced from dfs.o(.rti_fn.3)
 <LI><a href="#[aa]">dhcp_recv</a> from dhcp.o(.text) referenced from dhcp.o(.text)
 <LI><a href="#[b0]">dhcp_timer_coarse</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[b1]">dhcp_timer_fine</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[ab]">dns_recv</a> from dns.o(.text) referenced from dns.o(.text)
 <LI><a href="#[b2]">dns_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[92]">do_bind</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[99]">do_close</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[93]">do_connect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[a1]">do_connected</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[90]">do_delconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[94]">do_disconnect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[a3]">do_dns_found</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[91]">do_getaddr</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[9a]">do_gethostbyname</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[95]">do_listen</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[433]">do_netifapi_netif_add</a> from netifapi.o(.text) referenced from netifapi.o(.text)
 <LI><a href="#[437]">do_netifapi_netif_common</a> from netifapi.o(.text) referenced from netifapi.o(.text)
 <LI><a href="#[435]">do_netifapi_netif_set_addr</a> from netifapi.o(.text) referenced from netifapi.o(.text)
 <LI><a href="#[8f]">do_newconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[96]">do_recv</a> from api_msg.o(.text) referenced 2 times from api_lib.o(.text)
 <LI><a href="#[97]">do_send</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[98]">do_write</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[9d]">err_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[b6]">eth_netif_device_init</a> from ethernetif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[b9]">eth_rx_thread_entry</a> from ethernetif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[11f]">eth_system_device_init</a> from ethernetif.o(.text) referenced from ethernetif.o(.rti_fn.2)
 <LI><a href="#[ba]">eth_tx_thread_entry</a> from ethernetif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[b3]">etharp_output</a> from etharp.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[b4]">ethernetif_linkoutput</a> from ethernetif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[a4]">event_callback</a> from sockets.o(.text) referenced 2 times from sockets.o(.text)
 <LI><a href="#[bf]">finsh_rx_ind</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[121]">finsh_system_init</a> from shell.o(.text) referenced from shell.o(.rti_fn.3)
 <LI><a href="#[5f6]">finsh_thread_entry</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[175]">getDicFifthInfo</a> from dictionary.o(.text) referenced from dictionary.o(.text)
 <LI><a href="#[17a]">getDicFirstInfo</a> from dictionary.o(.text) referenced from dictionary.o(.text)
 <LI><a href="#[177]">getDicFourthInfo</a> from dictionary.o(.text) referenced from dictionary.o(.text)
 <LI><a href="#[179]">getDicSecondInfo</a> from dictionary.o(.text) referenced from dictionary.o(.text)
 <LI><a href="#[178]">getDicThirdInfo</a> from dictionary.o(.text) referenced from dictionary.o(.text)
 <LI><a href="#[bd]">heart_timeout</a> from abox_exchange.o(.text) referenced from abox_exchange.o(.text)
 <LI><a href="#[153]">hello</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[c9]">i2c_bus_device_control</a> from i2c_dev.o(.text) referenced from i2c_dev.o(.text)
 <LI><a href="#[c7]">i2c_bus_device_read</a> from i2c_dev.o(.text) referenced from i2c_dev.o(.text)
 <LI><a href="#[c8]">i2c_bus_device_write</a> from i2c_dev.o(.text) referenced from i2c_dev.o(.text)
 <LI><a href="#[15d]">list</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[167]">list_date</a> from rtc.o(.text) referenced from rtc.o(FSymTab)
 <LI><a href="#[15c]">list_device</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[157]">list_event</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[12c]">list_if</a> from ethernetif.o(.text) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[159]">list_mailbox</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[128]">list_mem</a> from mem.o(.text) referenced from mem.o(FSymTab)
 <LI><a href="#[15a]">list_msgqueue</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[158]">list_mutex</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[156]">list_sem</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[12d]">list_tcps</a> from ethernetif.o(.text) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[155]">list_thread</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[15b]">list_timer</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[222]">log_thread</a> from abox_log.o(.text) referenced from abox_log.o(.text)
 <LI><a href="#[a5]">lwip_getsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[a6]">lwip_setsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[77]">main</a> from startup.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[160]">mkdir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[162]">mkfs</a> from dfs_fs.o(.text) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[124]">monitor_task</a> from monitor.o(.text) referenced from monitor.o(.rti_fn.6)
 <LI><a href="#[1cf]">monitor_thread_entry</a> from monitor.o(.text) referenced from monitor.o(.text)
 <LI><a href="#[15e]">msh_enter</a> from msh.o(.text) referenced from msh.o(FSymTab)
 <LI><a href="#[15f]">msh_help</a> from msh.o(.text) referenced from msh.o(FSymTab)
 <LI><a href="#[bb]">netif_device_init</a> from sys_arch.o(.text) referenced from sys_arch.o(.text)
 <LI><a href="#[b8]">netif_set_link_down</a> from netif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[b7]">netif_set_link_up</a> from netif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[a8]">pbuf_free_int</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[ac]">pbuf_free_ooseq_callback</a> from pbuf.o(.text) referenced from pbuf.o(.text)
 <LI><a href="#[85]">phy_monitor_thread_entry</a> from stm32f4xx_eth.o(.text) referenced from stm32f4xx_eth.o(.text)
 <LI><a href="#[12e]">ping</a> from ping.o(.text) referenced from ping.o(FSymTab)
 <LI><a href="#[9c]">poll_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[be]">power_thread_entry</a> from adc.o(.text) referenced from adc.o(.text)
 <LI><a href="#[79]">record_log</a> from abox_log.o(.text) referenced from abox_log.o(.text)
 <LI><a href="#[9f]">recv_raw</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[9e]">recv_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[a0]">recv_udp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[a9]">rt_free</a> from mem.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[11c]">rt_hw_spi_init</a> from drv_spi.o(.text) referenced from drv_spi.o(.rti_fn.1)
 <LI><a href="#[123]">rt_i2c_core_init</a> from i2c_core.o(.text) referenced from i2c_core.o(.rti_fn.3)
 <LI><a href="#[1f0]">rt_init_thread_entry</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[164]">rt_pin_mode</a> from pin.o(.text) referenced from pin.o(FSymTab)
 <LI><a href="#[166]">rt_pin_read</a> from pin.o(.text) referenced from pin.o(FSymTab)
 <LI><a href="#[165]">rt_pin_write</a> from pin.o(.text) referenced from pin.o(FSymTab)
 <LI><a href="#[7e]">rt_rtc_control</a> from stm32f4_rtc.o(.text) referenced from stm32f4_rtc.o(.text)
 <LI><a href="#[7c]">rt_rtc_open</a> from stm32f4_rtc.o(.text) referenced from stm32f4_rtc.o(.text)
 <LI><a href="#[7d]">rt_rtc_read</a> from stm32f4_rtc.o(.text) referenced from stm32f4_rtc.o(.text)
 <LI><a href="#[d5]">rt_serial_close</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[d8]">rt_serial_control</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[d3]">rt_serial_init</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[d4]">rt_serial_open</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[d6]">rt_serial_read</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[d7]">rt_serial_write</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[81]">rt_stm32_eth_close</a> from stm32f4xx_eth.o(.text) referenced from stm32f4xx_eth.o(.text)
 <LI><a href="#[84]">rt_stm32_eth_control</a> from stm32f4xx_eth.o(.text) referenced from stm32f4xx_eth.o(.text)
 <LI><a href="#[7f]">rt_stm32_eth_init</a> from stm32f4xx_eth.o(.text) referenced from stm32f4xx_eth.o(.text)
 <LI><a href="#[80]">rt_stm32_eth_open</a> from stm32f4xx_eth.o(.text) referenced from stm32f4xx_eth.o(.text)
 <LI><a href="#[82]">rt_stm32_eth_read</a> from stm32f4xx_eth.o(.text) referenced from stm32f4xx_eth.o(.text)
 <LI><a href="#[296]">rt_stm32_eth_rx</a> from stm32f4xx_eth.o(.text) referenced from stm32f4xx_eth.o(.text)
 <LI><a href="#[292]">rt_stm32_eth_tx</a> from stm32f4xx_eth.o(.text) referenced from stm32f4xx_eth.o(.text)
 <LI><a href="#[83]">rt_stm32_eth_write</a> from stm32f4xx_eth.o(.text) referenced from stm32f4xx_eth.o(.text)
 <LI><a href="#[586]">rt_sub_Abox_init_thread_entry</a> from sub_g_a.o(.text) referenced from sub_g_a.o(.text)
 <LI><a href="#[89]">rt_thread_exit</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[88]">rt_thread_idle_entry</a> from idle.o(.text) referenced from idle.o(.text)
 <LI><a href="#[3ae]">rt_thread_timeout</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[8a]">rt_thread_timer_entry</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[6b8]">rt_usbDisk_thread_entry</a> from drv_usbh.o(.text) referenced from drv_usbh.o(.text)
 <LI><a href="#[11e]">rti_board_end</a> from components.o(.text) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[11b]">rti_board_start</a> from components.o(.text) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[126]">rti_end</a> from components.o(.text) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[11a]">rti_start</a> from components.o(.text) referenced from components.o(.rti_fn.0)
 <LI><a href="#[7b]">send_log_to_server</a> from abox_log.o(.text) referenced from abox_log.o(.text)
 <LI><a href="#[9b]">sent_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[168]">set_date</a> from rtc.o(.text) referenced from rtc.o(FSymTab)
 <LI><a href="#[12b]">set_dns</a> from ethernetif.o(.text) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[12a]">set_if</a> from ethernetif.o(.text) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[169]">set_time</a> from rtc.o(.text) referenced from rtc.o(FSymTab)
 <LI><a href="#[127]">show_time</a> from stm32f4_rtc.o(.text) referenced from stm32f4_rtc.o(FSymTab)
 <LI><a href="#[dd]">stm32_configure</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[de]">stm32_control</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[e0]">stm32_getc</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[11d]">stm32_hw_usart_init</a> from usart.o(.text) referenced from usart.o(.rti_fn.1)
 <LI><a href="#[df]">stm32_putc</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[120]">stm_usbh_register</a> from drv_usbh.o(.text) referenced from drv_usbh.o(.rti_fn.2)
 <LI><a href="#[78]">take_log_event</a> from abox_log.o(.text) referenced from abox_log.o(.text)
 <LI><a href="#[51e]">tcpSend</a> from client.o(.text) referenced from client.o(.text)
 <LI><a href="#[ad]">tcp_accept_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[532]">tcp_eth_recv</a> from eth.o(.text) referenced from eth.o(.text)
 <LI><a href="#[4c5]">tcp_recv_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[527]">tcpcheck</a> from client.o(.text) referenced from client.o(.text)
 <LI><a href="#[125]">tcpclient_init</a> from client.o(.text) referenced from client.o(.rti_fn.6)
 <LI><a href="#[bc]">tcpip_init_done_callback</a> from sys_arch.o(.text) referenced from sys_arch.o(.text)
 <LI><a href="#[b5]">tcpip_input</a> from tcpip.o(.text) referenced 2 times from ethernetif.o(.text)
 <LI><a href="#[ae]">tcpip_tcp_timer</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[a7]">tcpip_thread</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[c2]">telnet_close</a> from telnet.o(.text) referenced from telnet.o(.text)
 <LI><a href="#[c5]">telnet_control</a> from telnet.o(.text) referenced from telnet.o(.text)
 <LI><a href="#[c0]">telnet_init</a> from telnet.o(.text) referenced from telnet.o(.text)
 <LI><a href="#[c1]">telnet_open</a> from telnet.o(.text) referenced from telnet.o(.text)
 <LI><a href="#[c3]">telnet_read</a> from telnet.o(.text) referenced from telnet.o(.text)
 <LI><a href="#[c6]">telnet_thread</a> from telnet.o(.text) referenced from telnet.o(.text)
 <LI><a href="#[c4]">telnet_write</a> from telnet.o(.text) referenced from telnet.o(.text)
 <LI><a href="#[154]">version</a> from cmd.o(.text) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[775]">wifi_recv_thread</a> from cc3100.o(.text) referenced from cc3100.o(.text)
 <LI><a href="#[213]">write_to_log_file</a> from abox_log.o(.text) referenced from abox_log.o(.text)
 <LI><a href="#[1]">xfer</a> from drv_spi.o(.text) referenced 2 times from drv_spi.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[87]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[792]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[16a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[789]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[793]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[794]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[795]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[796]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[797]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[16c]"></a>setDicnary1</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = setDicnary1 &rArr; SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAppVertion
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSetup
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDictionary
</UL>

<P><STRONG><a name="[170]"></a>setDicnary3</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = setDicnary3 &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDictionary
</UL>

<P><STRONG><a name="[172]"></a>initDictionary</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = initDictionary &rArr; setDicnary1 &rArr; SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDicnary3
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDicnary1
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxThreadInformation
</UL>

<P><STRONG><a name="[173]"></a>getModsignal</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dictionary.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[175]"></a>getDicFifthInfo</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = getDicFifthInfo &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictionary.o(.text)
</UL>
<P><STRONG><a name="[177]"></a>getDicFourthInfo</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = getDicFourthInfo &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictionary.o(.text)
</UL>
<P><STRONG><a name="[178]"></a>getDicThirdInfo</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = getDicThirdInfo &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictionary.o(.text)
</UL>
<P><STRONG><a name="[179]"></a>getDicSecondInfo</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = getDicSecondInfo &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictionary.o(.text)
</UL>
<P><STRONG><a name="[17a]"></a>getDicFirstInfo</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = getDicFirstInfo &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dictionary.o(.text)
</UL>
<P><STRONG><a name="[17b]"></a>getDicInfo</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = getDicInfo &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd1_func
</UL>

<P><STRONG><a name="[17c]"></a>del_smd1_func</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = del_smd1_func &rArr; g3_send_pack &rArr; Abox_send_pack &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g3_send_pack
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_dic_cmd
</UL>

<P><STRONG><a name="[17f]"></a>del_smd2_func</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = del_smd2_func &rArr; HWReboot &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWReboot
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_dic_cmd
</UL>

<P><STRONG><a name="[182]"></a>sendCmd122ForScmd4Scmd5</STRONG> (Thumb, 192 bytes, Stack size 264 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1340<LI>Call Chain = sendCmd122ForScmd4Scmd5 &rArr; readServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readServerInfo
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g3_send_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd5_func
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd4_func
</UL>

<P><STRONG><a name="[184]"></a>del_smd4_func</STRONG> (Thumb, 78 bytes, Stack size 240 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1580<LI>Call Chain = del_smd4_func &rArr; sendCmd122ForScmd4Scmd5 &rArr; readServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerInfo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_server
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd122ForScmd4Scmd5
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_dic_cmd
</UL>

<P><STRONG><a name="[189]"></a>del_smd5_func</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1340<LI>Call Chain = del_smd5_func &rArr; sendCmd122ForScmd4Scmd5 &rArr; readServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd122ForScmd4Scmd5
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_dic_cmd
</UL>

<P><STRONG><a name="[18a]"></a>recv_dic_cmd</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, dictionary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1596<LI>Call Chain = recv_dic_cmd &rArr; del_smd4_func &rArr; sendCmd122ForScmd4Scmd5 &rArr; readServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_server
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd5_func
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd4_func
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd2_func
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd1_func
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_rev_pack
</UL>

<P><STRONG><a name="[19d]"></a>stm32_spi_register</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = stm32_spi_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi3_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
</UL>

<P><STRONG><a name="[1a2]"></a>rt_hw_spi1_init</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_hw_spi1_init &rArr; stm32_spi_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[1a6]"></a>rt_hw_spi3_init</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_hw_spi3_init &rArr; stm32_spi_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[11c]"></a>rt_hw_spi_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_hw_spi_init &rArr; rt_hw_spi3_init &rArr; stm32_spi_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi3_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1a7]"></a>makediskdir</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
</UL>

<P><STRONG><a name="[1aa]"></a>disksize</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</UL>

<P><STRONG><a name="[1ad]"></a>ls</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disksize
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[1b4]"></a>rdall</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdall
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdall
</UL>

<P><STRONG><a name="[1ba]"></a>rm</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_file
</UL>

<P><STRONG><a name="[1bc]"></a>cat</STRONG> (Thumb, 76 bytes, Stack size 96 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[1be]"></a>move</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[1c9]"></a>copy</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[1ca]"></a>readspeed</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filespeed
</UL>

<P><STRONG><a name="[1cc]"></a>writespeed</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filespeed
</UL>

<P><STRONG><a name="[1ce]"></a>filespeed</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
</UL>

<P><STRONG><a name="[1cf]"></a>monitor_thread_entry</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, monitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = monitor_thread_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>monitor_task</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, monitor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = monitor_task &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[1d3]"></a>assert_failed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphResetCmd
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemLPConfig
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetPTPRegister
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetPTPTimeStampUpdate
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SetPTPSubSecondIncrement
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetPTPFlagStatus
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPTimeStampCmd
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPUpdateMethodConfig
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPSubSecondRolloverCmd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPPacketSnoopingV2FormatCmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPSnapshotCmd
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PTPNodeClockTypeConfig
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetMMCRegister
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetMMCITStatus
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MMCITConfig
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MMCCounterRolloverCmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MMCResetOnReadCmd
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MMCCounterFreezeCmd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PowerDownCmd
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MagicPacketDetectionCmd
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WakeUpFrameDetectionCmd
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetPMTFlagStatus
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GlobalUnicastWakeUpCmd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMAOverflowStatus
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAITConfig
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearITPendingBit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMAITStatus
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearFlag
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMAFlagStatus
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMARxDescBufferSize
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescSecondAddressChainedCmd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescEndOfRingCmd
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescReceiveITConfig
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMAPTPRxDescExtendedFlagStatus
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMARxDescFlagStatus
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescBufferSizeConfig
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescTimeStampCmd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescShortFramePaddingCmd
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescSecondAddressChainedCmd
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescEndOfRingCmd
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescCRCCmd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChecksumInsertionConfig
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescFrameSegmentConfig
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescTransmitITConfig
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMATxDescFlagStatus
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressMaskBytesFilterConfig
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressFilterConfig
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressPerfectFilterCmd
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetMACAddress
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACITConfig
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetMACITStatus
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetMACFlagStatus
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BackPressureActivationCmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHYLoopBackCmd
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_EnhancedDescriptorCmd
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDACmd
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDAConfig
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardNACKCmd
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardCmd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetGuardTime
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_HalfDuplexCmd
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBreak
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINCmd
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINBreakDetectLengthConfig
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WakeUpConfig
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiverWakeUpCmd
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetAddress
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OneBitMethodCmd
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetPrescaler
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_CompensationCellCmd
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_MemoryRemapConfig
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearITPendingBit
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetITStatus
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearFlag
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetCRCPolynomial
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetCRC
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitCRC
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_FullDuplexConfig
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIModeCmd
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputCmd
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NSSInternalSoftwareConfig
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SynchroShiftConfig
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_OutputTypeConfig
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampPinSelection
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TamperPinSelection
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TamperPullUpCmd
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampOnTamperDetectionCmd
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TamperPinsPrechargeDuration
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TamperSamplingFreqConfig
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TamperFilterConfig
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TamperCmd
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TamperTriggerConfig
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampCmd
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SmoothCalibConfig
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibOutputConfig
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibOutputCmd
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_OutputConfig
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DayLightSavingConfig
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpCmd
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetWakeUpCounter
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpClockConfig
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmSubSecondConfig
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BypassShadowCmd
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtectionCmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearITPendingBit
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetITStatus
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ITConfig
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockLPModeCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockLPModeCmd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockLPModeCmd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockLPModeCmd
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockLPModeCmd
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphResetCmd
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_I2SCLKConfig
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO2Config
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockSecuritySystemCmd
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SCmd
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SConfig
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AdjustHSICalibrationValue
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_FlashPowerDownCmd
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_MainRegulatorModeConfig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupRegulatorCmd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_WakeUpPinCmd
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDCmd
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDLevelConfig
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_GetFlagStatus
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinLockConfig
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetFlagStatus
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ITConfig
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_BORConfig
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramDoubleWord
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DataCacheCmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_InstructionCacheCmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFIFOStatus
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrentMemoryTarget
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MemoryTargetConfig
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PeriphIncOffsetSizeConfig
</UL>

<P><STRONG><a name="[1d4]"></a>rtthread_startup</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rtthread_startup &rArr; rt_system_PD_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_IWDG_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_PD_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_system_PD_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1e1]"></a>crc32</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, upload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flash_crc
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_img_crc
</UL>

<P><STRONG><a name="[1e0]"></a>calc_img_crc</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, upload.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_file
</UL>

<P><STRONG><a name="[1e2]"></a>calc_flash_crc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, upload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = calc_flash_crc &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadMoreByte
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFlashFile
</UL>

<P><STRONG><a name="[1e4]"></a>calc_file</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, upload.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_img_crc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[1e7]"></a>wwdg_auto_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ry
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setid
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataSet
</UL>

<P><STRONG><a name="[3cc]"></a>wwdg_auto_open</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ry
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setid
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>

<P><STRONG><a name="[1e6]"></a>IWDG_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = IWDG_Init &rArr; IWDG_WriteAccessCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_auto_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_IWDG_init
</UL>

<P><STRONG><a name="[1ed]"></a>IWDG_Feed</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wwdg.o(.text)
</UL>
<P><STRONG><a name="[1dc]"></a>rt_thread_IWDG_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_thread_IWDG_init &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1f0]"></a>rt_init_thread_entry</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_init_thread_entry &rArr; subg_Abox_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_Abox_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_close
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSetup
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[1d9]"></a>rt_application_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[21e]"></a>ModbusCrc16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, check.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModbusCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_data
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFreqPack
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_ser_heart
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_send_pack
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_PackRegCmd
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkDataFromSubg
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packADCInfo
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
</UL>

<P><STRONG><a name="[798]"></a>CcittCrc16</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, check.o(.text), UNUSED)

<P><STRONG><a name="[799]"></a>CheckAddsum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, check.o(.text), UNUSED)

<P><STRONG><a name="[79a]"></a>CheckCrc8Sum</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, check.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>InitDataPool</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, setpool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = InitDataPool &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxInformation
</UL>

<P><STRONG><a name="[1f8]"></a>WritePool</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, setpool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = WritePool &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDataInfo
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvServerData
</UL>

<P><STRONG><a name="[1fb]"></a>ReadPool</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, setpool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ReadPool &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_left
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processExistingData
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPoolDate
</UL>

<P><STRONG><a name="[1fd]"></a>cleanPool</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, setpool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = cleanPool &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanCbox
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
</UL>

<P><STRONG><a name="[1fe]"></a>Destroy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, setpool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1ff]"></a>itoa</STRONG> (Thumb, 166 bytes, Stack size 80 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = itoa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_server
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_table
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_txt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_each_txt
</UL>

<P><STRONG><a name="[204]"></a>send_IP_conflict_result</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = send_IP_conflict_result &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[206]"></a>open_log_diagnosis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = open_log_diagnosis &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitEthStatus
</UL>

<P><STRONG><a name="[207]"></a>print_log_diagnosis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = print_log_diagnosis &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>

<P><STRONG><a name="[208]"></a>send_log_diagnosis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = send_log_diagnosis &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_DEV_USER_GET_SSTATUS
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchLogSheet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sendlog
</UL>

<P><STRONG><a name="[209]"></a>wait_print_log</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = wait_print_log &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>

<P><STRONG><a name="[213]"></a>write_to_log_file</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = write_to_log_file &rArr; write_log_file &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_log_file
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abox_log.o(.text)
</UL>
<P><STRONG><a name="[215]"></a>check_arp_table</STRONG> (Thumb, 622 bytes, Stack size 40 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = check_arp_table &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_string
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
</UL>

<P><STRONG><a name="[216]"></a>check_server</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = check_server &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
</UL>

<P><STRONG><a name="[217]"></a>ip_conflict_detection</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = ip_conflict_detection &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
</UL>

<P><STRONG><a name="[218]"></a>analysis_reason</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = analysis_reason &rArr; check_arp_table &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_log_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_log_file
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_log_file
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConnectStatus
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_conflict_detection
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_server
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_table
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_txt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_each_txt
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>

<P><STRONG><a name="[21d]"></a>send_log_data</STRONG> (Thumb, 150 bytes, Stack size 1056 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1588<LI>Call Chain = send_log_data &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCrc16
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_to_server
</UL>

<P><STRONG><a name="[220]"></a>log_thread_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = log_thread_init &rArr; rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_thread
</UL>

<P><STRONG><a name="[222]"></a>log_thread</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = log_thread &rArr; log_thread_init &rArr; rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_thread_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abox_log.o(.text)
</UL>
<P><STRONG><a name="[223]"></a>Abox_log_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Abox_log_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpcheck
</UL>

<P><STRONG><a name="[224]"></a>NVIC_Configuration</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = NVIC_Configuration &rArr; NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[227]"></a>SysTick_Configuration</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SysTick_Configuration &rArr; SysTick_CLKSourceConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[24]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[79b]"></a>Read_top_tray_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>rt_hw_board_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_hw_board_init &rArr; rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultSetup
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[23d]"></a>RTC_Configuration</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[243]"></a>rt_hw_rtc_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f4_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[127]"></a>show_time</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, stm32f4_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = show_time &rArr; RTC_GetTime &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4_rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[246]"></a>ETH_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ETH_DeInit &rArr; RCC_AHB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[248]"></a>ETH_Init</STRONG> (Thumb, 1428 bytes, Stack size 64 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ETH_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[28e]"></a>ETH_StructInit</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[249]"></a>ETH_DMAReceptionCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ETH_DMAReceptionCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[24a]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ETH_DMATransmissionCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[24b]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ETH_MACReceptionCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[24e]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[24c]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ETH_MACTransmissionCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[24d]"></a>ETH_Start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ETH_Start &rArr; ETH_MACTransmissionCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[79c]"></a>ETH_HandleTxPkt</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[79d]"></a>ETH_HandleRxPkt</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>ETH_GetDMARxDescFrameLength</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetRxPktSize
</UL>

<P><STRONG><a name="[24f]"></a>ETH_GetRxPktSize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMARxDescFrameLength
</UL>

<P><STRONG><a name="[79e]"></a>ETH_DropRxPkt</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>ETH_EnhancedDescriptorCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[252]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ETH_ReadPHYRegister &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHYLoopBackCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>

<P><STRONG><a name="[253]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ETH_WritePHYRegister &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHYLoopBackCmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>

<P><STRONG><a name="[254]"></a>ETH_PHYLoopBackCmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[79f]"></a>ETH_GetFlowControlBusyStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7a0]"></a>ETH_InitiatePauseControlFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>ETH_BackPressureActivationCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[256]"></a>ETH_GetMACFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[257]"></a>ETH_GetMACITStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[258]"></a>ETH_MACITConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[259]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ETH_MACAddressConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[25a]"></a>ETH_GetMACAddress</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[25b]"></a>ETH_MACAddressPerfectFilterCmd</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[25c]"></a>ETH_MACAddressFilterConfig</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[25d]"></a>ETH_MACAddressMaskBytesFilterConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28f]"></a>ETH_DMATxDescChainInit</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMATxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[7a1]"></a>ETH_DMATxDescRingInit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>ETH_GetDMATxDescFlagStatus</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7a2]"></a>ETH_GetDMATxDescCollisionCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7a3]"></a>ETH_SetDMATxDescOwnBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>ETH_DMATxDescTransmitITConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[260]"></a>ETH_DMATxDescFrameSegmentConfig</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[261]"></a>ETH_DMATxDescChecksumInsertionConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[262]"></a>ETH_DMATxDescCRCCmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[263]"></a>ETH_DMATxDescEndOfRingCmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[264]"></a>ETH_DMATxDescSecondAddressChainedCmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[265]"></a>ETH_DMATxDescShortFramePaddingCmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[266]"></a>ETH_DMATxDescTimeStampCmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[267]"></a>ETH_DMATxDescBufferSizeConfig</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[290]"></a>ETH_DMARxDescChainInit</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[7a4]"></a>ETH_DMARxDescRingInit</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>ETH_GetDMARxDescFlagStatus</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[269]"></a>ETH_GetDMAPTPRxDescExtendedFlagStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7a5]"></a>ETH_SetDMARxDescOwnBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>ETH_DMARxDescReceiveITConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[26b]"></a>ETH_DMARxDescEndOfRingCmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[26c]"></a>ETH_DMARxDescSecondAddressChainedCmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[26d]"></a>ETH_GetDMARxDescBufferSize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28c]"></a>ETH_SoftwareReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[28d]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[26e]"></a>ETH_GetDMAFlagStatus</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[26f]"></a>ETH_DMAClearFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[270]"></a>ETH_GetDMAITStatus</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[271]"></a>ETH_DMAClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ETH_DMAClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[7a6]"></a>ETH_GetTransmitProcessState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7a7]"></a>ETH_GetReceiveProcessState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7a8]"></a>ETH_GetFlushTransmitFIFOStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>ETH_DMAITConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ETH_DMAITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[273]"></a>ETH_GetDMAOverflowStatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7a9]"></a>ETH_GetRxOverflowMissedFrameCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7aa]"></a>ETH_GetBufferUnavailableMissedFrameCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7ab]"></a>ETH_GetCurrentTxDescStartAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7ac]"></a>ETH_GetCurrentRxDescStartAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7ad]"></a>ETH_GetCurrentTxBufferAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7ae]"></a>ETH_GetCurrentRxBufferAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7af]"></a>ETH_ResumeDMATransmission</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7b0]"></a>ETH_ResumeDMAReception</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7b1]"></a>ETH_SetReceiveWatchdogTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7b2]"></a>ETH_ResetWakeUpFrameFilterRegisterPointer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7b3]"></a>ETH_SetWakeUpFrameFilterRegister</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>ETH_GlobalUnicastWakeUpCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[275]"></a>ETH_GetPMTFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[276]"></a>ETH_WakeUpFrameDetectionCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[277]"></a>ETH_MagicPacketDetectionCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[278]"></a>ETH_PowerDownCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7b4]"></a>ETH_MMCCounterFullPreset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7b5]"></a>ETH_MMCCounterHalfPreset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>ETH_MMCCounterFreezeCmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27a]"></a>ETH_MMCResetOnReadCmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27b]"></a>ETH_MMCCounterRolloverCmd</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7b6]"></a>ETH_MMCCountersReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>ETH_MMCITConfig</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27d]"></a>ETH_GetMMCITStatus</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27e]"></a>ETH_GetMMCRegister</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27f]"></a>ETH_PTPNodeClockTypeConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[280]"></a>ETH_PTPSnapshotCmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[281]"></a>ETH_PTPPacketSnoopingV2FormatCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[282]"></a>ETH_PTPSubSecondRolloverCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7b7]"></a>ETH_EnablePTPTimeStampAddend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7b8]"></a>ETH_EnablePTPTimeStampInterruptTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7b9]"></a>ETH_EnablePTPTimeStampUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7ba]"></a>ETH_InitializePTPTimeStamp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>ETH_PTPUpdateMethodConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[284]"></a>ETH_PTPTimeStampCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[285]"></a>ETH_GetPTPFlagStatus</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[286]"></a>ETH_SetPTPSubSecondIncrement</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[287]"></a>ETH_SetPTPTimeStampUpdate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7bb]"></a>ETH_SetPTPTimeStampAddend</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7bc]"></a>ETH_SetPTPTargetTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>ETH_GetPTPRegister</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7bd]"></a>ETH_DMAPTPTxDescChainInit</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7be]"></a>ETH_DMAPTPRxDescChainInit</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7bf]"></a>ETH_HandlePTPTxPkt</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[7c0]"></a>ETH_HandlePTPRxPkt</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>ETH_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ETH_IRQHandler &rArr; eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearITPendingBit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[292]"></a>rt_stm32_eth_tx</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_stm32_eth_tx &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth.o(.text)
</UL>
<P><STRONG><a name="[296]"></a>rt_stm32_eth_rx</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_stm32_eth_rx &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth.o(.text)
</UL>
<P><STRONG><a name="[29c]"></a>rt_hw_stm32_eth_init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = rt_hw_stm32_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethStyleStart
</UL>

<P><STRONG><a name="[1c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = USART1_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART3_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = USART3_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>stm32_hw_usart_init</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = stm32_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[7c1]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = NVIC_PriorityGroupConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[299]"></a>NVIC_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_PD_init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSubgHardware
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine0_Config
</UL>

<P><STRONG><a name="[225]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[2ac]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[229]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SysTick_CLKSourceConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[18f]"></a>DMA_DeInit</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DMA_DeInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[190]"></a>DMA_Init</STRONG> (Thumb, 570 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[7c2]"></a>DMA_StructInit</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>DMA_Cmd</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[2ad]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ae]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2af]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b0]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b1]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b2]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b3]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b4]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b5]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b6]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[198]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = DMA_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[18d]"></a>DMA_ClearFlag</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DMA_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[2b7]"></a>DMA_ITConfig</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b8]"></a>DMA_GetITStatus</STRONG> (Thumb, 650 bytes, Stack size 24 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b9]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7c3]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>EXTI_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = EXTI_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_PD_init
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSubgHardware
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine0_Config
</UL>

<P><STRONG><a name="[7c4]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2bc]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f4xx_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2bd]"></a>EXTI_ClearFlag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2be]"></a>EXTI_GetITStatus</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f4xx_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2bf]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = EXTI_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[2c0]"></a>FLASH_SetLatency</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c1]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c2]"></a>FLASH_InstructionCacheCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c3]"></a>FLASH_DataCacheCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = FLASH_DataCacheCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteToFlash
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSaveDataSector
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
</UL>

<P><STRONG><a name="[7c5]"></a>FLASH_InstructionCacheReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[7c6]"></a>FLASH_DataCacheReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[589]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteToFlash
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSaveDataSector
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
</UL>

<P><STRONG><a name="[58a]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteToFlash
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSaveDataSector
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
</UL>

<P><STRONG><a name="[2c5]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2c4]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramDoubleWord
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
</UL>

<P><STRONG><a name="[2c6]"></a>FLASH_EraseSector</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = FLASH_EraseSector &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSaveDataSector
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
</UL>

<P><STRONG><a name="[2c7]"></a>FLASH_EraseAllSectors</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2c8]"></a>FLASH_ProgramDoubleWord</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2c9]"></a>FLASH_ProgramWord</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[2ca]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2cb]"></a>FLASH_ProgramByte</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteToFlash
</UL>

<P><STRONG><a name="[7c7]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[7c8]"></a>FLASH_OB_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2cd]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2ce]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2cf]"></a>FLASH_OB_BORConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d0]"></a>FLASH_OB_Launch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[7c9]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[7ca]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[7cb]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[7cc]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>FLASH_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d2]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d3]"></a>FLASH_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d4]"></a>GPIO_DeInit</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[1a3]"></a>GPIO_Init</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi3_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWReboot
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPS_Init
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_hard_status
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[7cd]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d6]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = GPIO_ReadInputDataBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_hard_status
</UL>

<P><STRONG><a name="[2d7]"></a>GPIO_ReadInputData</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d8]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d9]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[19c]"></a>GPIO_SetBits</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi3_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
</UL>

<P><STRONG><a name="[196]"></a>GPIO_ResetBits</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = GPIO_ResetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWReboot
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>

<P><STRONG><a name="[2da]"></a>GPIO_WriteBit</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2db]"></a>GPIO_Write</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2dc]"></a>GPIO_ToggleBits</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1a4]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = GPIO_PinAFConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi3_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[1e8]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IWDG_WriteAccessCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[1e9]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IWDG_SetPrescaler &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[1ea]"></a>IWDG_SetReload</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IWDG_SetReload &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[1eb]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[1ec]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[2dd]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_iwdg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2de]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[237]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PWR_BackupAccessCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[2e0]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e1]"></a>PWR_PVDCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e2]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e3]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e4]"></a>PWR_MainRegulatorModeConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e5]"></a>PWR_FlashPowerDownCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e6]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7ce]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e8]"></a>PWR_ClearFlag</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7cf]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>RCC_HSEConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23f]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[2ea]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[2eb]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ec]"></a>RCC_HSICmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ed]"></a>RCC_LSEConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23e]"></a>RCC_LSICmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[2ee]"></a>RCC_PLLConfig</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ef]"></a>RCC_PLLCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f0]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f1]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f2]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f3]"></a>RCC_MCO1Config</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f4]"></a>RCC_MCO2Config</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f5]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7d0]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>RCC_HCLKConfig</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f7]"></a>RCC_PCLK1Config</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f8]"></a>RCC_PCLK2Config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[228]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clk
</UL>

<P><STRONG><a name="[240]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[241]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[2f9]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2fa]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[19e]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RCC_AHB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi3_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWReboot
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPS_Init
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_nHIB_init
</UL>

<P><STRONG><a name="[2fb]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RCC_AHB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[2fc]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1a0]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi3_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[19f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_PD_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSubgHardware
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine0_Config
</UL>

<P><STRONG><a name="[247]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RCC_AHB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[2fd]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2fe]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2df]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[2ff]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RCC_APB2PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[300]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[301]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[302]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[303]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[304]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[305]"></a>RCC_ITConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7d1]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>RCC_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[307]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[242]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SynchroShiftConfig
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[309]"></a>RTC_EnterInitMode</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[308]"></a>RTC_DeInit</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[30a]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
</UL>

<P><STRONG><a name="[238]"></a>RTC_Init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RTC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[7d2]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30c]"></a>RTC_RefClockCmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[30d]"></a>RTC_BypassShadowCmd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23b]"></a>RTC_SetTime</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RTC_SetTime &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[7d3]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>RTC_GetTime</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RTC_GetTime &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_time
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[7d4]"></a>RTC_GetSubSecond</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>RTC_SetDate</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RTC_SetDate &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[7d5]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>RTC_GetDate</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RTC_GetDate &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_time
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[310]"></a>RTC_SetAlarm</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>

<P><STRONG><a name="[7d6]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>RTC_GetAlarm</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[312]"></a>RTC_AlarmCmd</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[313]"></a>RTC_AlarmSubSecondConfig</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7d7]"></a>RTC_GetAlarmSubSecond</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[315]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7d8]"></a>RTC_GetWakeUpCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[317]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7d9]"></a>RTC_GetStoreOperation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>RTC_OutputConfig</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[319]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[31a]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[31b]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31c]"></a>RTC_CalibOutputConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31d]"></a>RTC_SmoothCalibConfig</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31e]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31f]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[7da]"></a>RTC_GetTimeStampSubSecond</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[321]"></a>RTC_TamperCmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[322]"></a>RTC_TamperFilterConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[323]"></a>RTC_TamperSamplingFreqConfig</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[324]"></a>RTC_TamperPinsPrechargeDuration</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[325]"></a>RTC_TimeStampOnTamperDetectionCmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[326]"></a>RTC_TamperPullUpCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23c]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RTC_WriteBackupRegister &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[244]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[327]"></a>RTC_TamperPinSelection</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[328]"></a>RTC_TimeStampPinSelection</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[329]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[32a]"></a>RTC_SynchroShiftConfig</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[32b]"></a>RTC_ITConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[32c]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[32d]"></a>RTC_ClearFlag</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[32e]"></a>RTC_GetITStatus</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[32f]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[192]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SPI_I2S_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[193]"></a>SPI_Init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SPI_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[330]"></a>I2S_Init</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[191]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[7db]"></a>I2S_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>SPI_Cmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SPI_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[331]"></a>I2S_Cmd</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[332]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[333]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[334]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[335]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[336]"></a>SPI_TIModeCmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[337]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[19b]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SPI_I2S_ReceiveData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[19a]"></a>SPI_I2S_SendData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SPI_I2S_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[195]"></a>SPI_CalculateCRC</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SPI_CalculateCRC &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[338]"></a>SPI_TransmitCRC</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[339]"></a>SPI_GetCRC</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[33a]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[197]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SPI_I2S_DMACmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[33b]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[199]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SPI_I2S_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[33c]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[33d]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[33e]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[33f]"></a>SYSCFG_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[340]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[341]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SYSCFG_EXTILineConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_PD_init
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSubgHardware
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine0_Config
</UL>

<P><STRONG><a name="[28b]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SYSCFG_ETH_MediaInterfaceConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>

<P><STRONG><a name="[342]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7dc]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>USART_DeInit</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[29f]"></a>USART_Init</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[7dd]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>USART_ClockInit</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7de]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>USART_Cmd</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USART_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[345]"></a>USART_SetPrescaler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[346]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[347]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[348]"></a>USART_SendData</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[349]"></a>USART_ReceiveData</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[34a]"></a>USART_SetAddress</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[34b]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[34c]"></a>USART_WakeUpConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[34d]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[34e]"></a>USART_LINCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[34f]"></a>USART_SendBreak</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[350]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[351]"></a>USART_SetGuardTime</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[352]"></a>USART_SmartCardCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[353]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[354]"></a>USART_IrDAConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[355]"></a>USART_IrDACmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[356]"></a>USART_DMACmd</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a1]"></a>USART_ITConfig</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[2a4]"></a>USART_GetFlagStatus</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USART_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[357]"></a>USART_ClearFlag</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a3]"></a>USART_GetITStatus</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USART_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[2a5]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USART_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[7df]"></a>rt_system_tick_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_thread_entry
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getModsignal
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_log
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assessCboxState
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayRandom
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_thread_entry
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_rev_pack
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvFreqData
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_jiffies
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
</UL>

<P><STRONG><a name="[358]"></a>rt_tick_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[22b]"></a>rt_tick_increase</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7e0]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, components.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1f1]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, components.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[35c]"></a>rt_device_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSubgHardware
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uimcode
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_find
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_Init
</UL>

<P><STRONG><a name="[245]"></a>rt_device_register</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</UL>

<P><STRONG><a name="[35f]"></a>rt_device_unregister</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[7e1]"></a>rt_device_init_all</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>rt_device_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = rt_device_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_device_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[362]"></a>rt_device_open</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uimcode
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>

<P><STRONG><a name="[39c]"></a>rt_device_close</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>

<P><STRONG><a name="[363]"></a>rt_device_read</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_device_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uimcode
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setid
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setmdn
</UL>

<P><STRONG><a name="[364]"></a>rt_device_write</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uimcode
</UL>

<P><STRONG><a name="[4fe]"></a>rt_device_control</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[3d7]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[7e2]"></a>rt_device_set_tx_complete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(.text), UNUSED)

<P><STRONG><a name="[7e3]"></a>rt_thread_idle_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, idle.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>rt_thread_idle_excute</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[1db]"></a>rt_thread_idle_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[29d]"></a>rt_sem_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[36f]"></a>rt_sem_detach</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_sem_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[370]"></a>rt_sem_create</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_PD_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_server
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSubgHardware
</UL>

<P><STRONG><a name="[372]"></a>rt_sem_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[294]"></a>rt_sem_take</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_thread_entry
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_read
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[375]"></a>rt_sem_trytake</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[289]"></a>rt_sem_release</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_rx_ind
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rx
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
</UL>

<P><STRONG><a name="[377]"></a>rt_sem_control</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[378]"></a>rt_mutex_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[379]"></a>rt_mutex_detach</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[1f7]"></a>rt_mutex_create</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_server
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDataPool
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</UL>

<P><STRONG><a name="[37a]"></a>rt_mutex_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_free
</UL>

<P><STRONG><a name="[1f9]"></a>rt_mutex_take</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanPool
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPool
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePool
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_read
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rx
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_option_to_client
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_client
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>

<P><STRONG><a name="[1fa]"></a>rt_mutex_release</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanPool
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPool
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePool
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_read
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rx
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_option_to_client
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_client
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release_bus
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
</UL>

<P><STRONG><a name="[7e4]"></a>rt_mutex_control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>rt_event_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[37d]"></a>rt_event_detach</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[221]"></a>rt_event_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_event_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_thread_init
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxInformation
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiStyleStart
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
</UL>

<P><STRONG><a name="[37e]"></a>rt_event_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[205]"></a>rt_event_send</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_thread
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_diagnosis
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log_diagnosis
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_log_diagnosis
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_IP_conflict_result
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxThreadInformation
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeAboxFreq
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitCC3100Tcp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWlanEventHandler
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[20a]"></a>rt_event_recv</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_conflict_detection
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_print_log
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_log_event
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determineAboxState
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpcheck
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCC3100TcpClose
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[37f]"></a>rt_event_control</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[380]"></a>rt_mb_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_mb_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init
</UL>

<P><STRONG><a name="[381]"></a>rt_mb_detach</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[382]"></a>rt_mb_create</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[383]"></a>rt_mb_delete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[384]"></a>rt_mb_send_wait</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[385]"></a>rt_mb_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>

<P><STRONG><a name="[386]"></a>rt_mb_recv</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
</UL>

<P><STRONG><a name="[387]"></a>rt_mb_control</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[388]"></a>rt_mq_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[389]"></a>rt_mq_detach</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[38a]"></a>rt_mq_delete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_mq_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[38b]"></a>rt_mq_create</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClient
</UL>

<P><STRONG><a name="[38c]"></a>rt_mq_send</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_send
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNormalData
</UL>

<P><STRONG><a name="[38d]"></a>rt_mq_urgent</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>

<P><STRONG><a name="[38e]"></a>rt_mq_recv</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_mq_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_recv
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[38f]"></a>rt_mq_control</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[22a]"></a>rt_interrupt_enter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[22c]"></a>rt_interrupt_leave</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[391]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
</UL>

<P><STRONG><a name="[390]"></a>rt_get_errno</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[291]"></a>rt_set_errno</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_read
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>

<P><STRONG><a name="[392]"></a>_rt_errno</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[17d]"></a>rt_memset</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_dic_cmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd122ForScmd4Scmd5
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd1_func
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_table
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_to_server
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_txt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_each_txt
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanPool
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDataPool
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSerNetConfigFile
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_tof
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCbox
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testPackFunc
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFreqPack
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseAboxSubgFreq
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processExistingData
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPoolDate
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAboxEnvironment
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_thread_entry
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_ser_heart
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getServerNetAdrr
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_PackRegCmd
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkDataFromSubg
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packADCInfo
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanCbox
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_client
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uimcode
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setport
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setpass
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setuser
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setid
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setmdn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbDefault
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataSet
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetSet
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalStrength
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[171]"></a>rt_memcpy</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_dic_cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd4_func
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd122ForScmd4Scmd5
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd2_func
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd1_func
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicInfo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicFirstInfo
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicSecondInfo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicThirdInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicFourthInfo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicFifthInfo
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDicnary3
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_control
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_data
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_conflict_detection
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_to_server
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_string
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_log
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPool
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePool
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSerNetConfigFile
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_tof
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determineAboxState
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insetCboxHeadData
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addCbox
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFreqPack
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseAboxSubgFreq
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPoolDate
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_ser_heart
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_DEV_USER_GET_SSTATUS
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchSheet
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeAboxFreq
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getServerNetAdrr
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_PackRegCmd
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packADCInfo
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_mdn
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataSet
</UL>

<P><STRONG><a name="[5f7]"></a>rt_memmove</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[394]"></a>rt_memcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>

<P><STRONG><a name="[1c1]"></a>rt_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uimcode
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;establishConnectionWithAP
</UL>

<P><STRONG><a name="[393]"></a>rt_strstr</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_strstr &rArr; rt_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uimcode
</UL>

<P><STRONG><a name="[7e5]"></a>rt_strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>rt_strncpy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setport
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setpass
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setuser
</UL>

<P><STRONG><a name="[35d]"></a>rt_strncmp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSerNetConfigFile
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[180]"></a>rt_strcmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd2_func
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalStrength
</UL>

<P><STRONG><a name="[1af]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_append
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_append
</UL>

<P><STRONG><a name="[398]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[395]"></a>rt_vsnprintf</STRONG> (Thumb, 652 bytes, Stack size 64 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>

<P><STRONG><a name="[185]"></a>rt_kprintf</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_file
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_img_crc
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disksize
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_server
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd4_func
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_time
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_thread_init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDataPool
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_first
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFlashFile
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcp_ip
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_thread_entry
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxInformation
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiStyleStart
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitCC3100Tcp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listConnectInfo
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClient
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_erx
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_etx
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_close
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ver
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sim
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uimcode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setgprs
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setport
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setpass
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setuser
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setfreq
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_testflash
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setid
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_id
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setmdn
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_mdn
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clk
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cls
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_UnrecoveredError
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_OverCurrentDetected
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_UserInput
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceNotSupported
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_EnumerationDone
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_SerialNum_String
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Product_String
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Manufacturer_String
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Configuration_DescAvailable
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceAddressAssigned
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Device_DescAvailable
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceSpeedDetected
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_ResetDevice
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceAttached
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_Init
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevGet
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataSet
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[399]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[1c2]"></a>rt_snprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</UL>

<P><STRONG><a name="[39a]"></a>rt_vsprintf</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[39b]"></a>rt_sprintf</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultSetup
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sim
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uimcode
</UL>

<P><STRONG><a name="[3cb]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ry
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setid
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setmdn
</UL>

<P><STRONG><a name="[230]"></a>rt_console_set_device</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_close
</UL>

<P><STRONG><a name="[39d]"></a>rt_malloc_align</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[39e]"></a>rt_free_align</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[3a6]"></a>__rt_ffs</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[7e6]"></a>rt_malloc_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[7e7]"></a>rt_free_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>rt_system_heap_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1b5]"></a>rt_malloc</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdall
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_server
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_to_server
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDataPool
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_recv
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_new
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_append
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_append
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
</UL>

<P><STRONG><a name="[a9]"></a>rt_free</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdall
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_to_server
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDataPool
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_delete
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_destroy
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[3a0]"></a>rt_realloc</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>

<P><STRONG><a name="[21a]"></a>rt_calloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_thread_init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_to_server
</UL>

<P><STRONG><a name="[7e8]"></a>rt_memory_info</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>list_mem</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(FSymTab)
</UL>
<P><STRONG><a name="[7e9]"></a>rt_object_attach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[7ea]"></a>rt_object_detach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[7eb]"></a>rt_object_trytake_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[7ec]"></a>rt_object_take_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[7ed]"></a>rt_object_put_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[7ee]"></a>rt_system_object_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[7ef]"></a>rt_object_get_information</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>rt_object_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>

<P><STRONG><a name="[360]"></a>rt_object_detach</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
</UL>

<P><STRONG><a name="[371]"></a>rt_object_allocate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>

<P><STRONG><a name="[368]"></a>rt_object_delete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[367]"></a>rt_object_is_systemobject</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[3a4]"></a>rt_object_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>

<P><STRONG><a name="[7f0]"></a>rt_scheduler_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>rt_system_scheduler_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1de]"></a>rt_system_scheduler_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = rt_system_scheduler_start &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[374]"></a>rt_schedule</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[3aa]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[3ab]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[234]"></a>rt_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[236]"></a>rt_exit_critical</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[7f1]"></a>rt_critical_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[1d1]"></a>rt_thread_init</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_task
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[359]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[36d]"></a>rt_thread_resume</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[1d2]"></a>rt_thread_startup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_Abox_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_PD_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_task
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_server
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_log_init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiStyleStart
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchange_Abox_init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethStyleStart
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_send_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_usbh_register
</UL>

<P><STRONG><a name="[3b4]"></a>rt_thread_detach</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[1f5]"></a>rt_thread_create</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subg_Abox_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_PD_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_server
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_log_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiStyleStart
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchange_Abox_init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethStyleStart
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_send_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_usbh_register
</UL>

<P><STRONG><a name="[3b5]"></a>rt_thread_delete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[35a]"></a>rt_thread_yield</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[36a]"></a>rt_thread_suspend</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[3b6]"></a>rt_thread_sleep</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[187]"></a>rt_thread_delay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_thread_entry
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWReboot
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd4_func
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_trans
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_thread_entry
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determineAboxState
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayRandom
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_roof_thread_entry
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_box_thread_entry
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_thread_entry
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdn_reset
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanCbox
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_netif_link
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitEthStatus
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_uimcode
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbDisk_thread_entry
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[37b]"></a>rt_thread_control</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[3b7]"></a>rt_thread_find</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_thread_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[7f2]"></a>rt_timer_timeout_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>rt_timer_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[3ac]"></a>rt_timer_detach</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1ee]"></a>rt_timer_create</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_IWDG_init
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchange_Abox_init
</UL>

<P><STRONG><a name="[3bc]"></a>rt_timer_delete</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[1ef]"></a>rt_timer_start</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_IWDG_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchange_Abox_init
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[3b3]"></a>rt_timer_stop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[373]"></a>rt_timer_control</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[35b]"></a>rt_timer_check</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[3be]"></a>rt_timer_next_timeout_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[3bf]"></a>rt_soft_timer_check</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_soft_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[1d8]"></a>rt_system_timer_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1da]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1df]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[293]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[3a9]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[3a8]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[23]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a7]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[7f3]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b1]"></a>rt_hw_stack_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[7f4]"></a>rt_hw_exception_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpuport.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[3c1]"></a>rt_hw_cpu_shutdown</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpuport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[3c2]"></a>search_ch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = search_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
</UL>

<P><STRONG><a name="[3c9]"></a>rym_write_to_file</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rym_write_to_file &rArr; rym_recv_on_device &rArr; _rym_do_recv &rArr; _rym_do_trans &rArr; _rym_trans_data &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ry
</UL>

<P><STRONG><a name="[129]"></a>cmd_ry</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = cmd_ry &rArr; rym_write_to_file &rArr; rym_recv_on_device &rArr; _rym_do_recv &rArr; _rym_do_trans &rArr; _rym_trans_data &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_auto_open
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_auto_close
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_connectInfo
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_ctrl
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tofile.o(FSymTab)
</UL>
<P><STRONG><a name="[3ca]"></a>rym_recv_on_device</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rym_recv_on_device &rArr; _rym_do_recv &rArr; _rym_do_trans &rArr; _rym_trans_data &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_recv
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_write_to_file
</UL>

<P><STRONG><a name="[3d8]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[3e0]"></a>netconn_delete</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_delete &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[3e2]"></a>netconn_getaddr</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[3e3]"></a>netconn_bind</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[3e4]"></a>netconn_connect</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_connect &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[3e5]"></a>netconn_disconnect</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[3e6]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[3e7]"></a>netconn_accept</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = netconn_accept &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[3ea]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[3eb]"></a>netconn_recv</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[3ec]"></a>netconn_recved</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = netconn_recved &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[3ed]"></a>netconn_send</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_send &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_sendto
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[3ee]"></a>netconn_sendto</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</UL>

<P><STRONG><a name="[3ef]"></a>netconn_write_partly</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netconn_write_partly &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[3f2]"></a>netconn_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[3f3]"></a>netconn_shutdown</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[3f4]"></a>netconn_gethostbyname</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</UL>

<P><STRONG><a name="[3e1]"></a>netconn_free</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = netconn_free &rArr; sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[3d9]"></a>netconn_alloc</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[8f]"></a>do_newconn</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>do_delconn</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = do_delconn &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>do_bind</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>do_connect</STRONG> (Thumb, 496 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>do_disconnect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = do_disconnect &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>do_listen</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>do_send</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = do_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>do_recv</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>do_write</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>do_getaddr</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = do_getaddr &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>do_close</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = do_close &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>do_gethostbyname</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = do_gethostbyname &rArr; dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[426]"></a>netbuf_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[3fb]"></a>netbuf_delete</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
</UL>

<P><STRONG><a name="[427]"></a>netbuf_alloc</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[428]"></a>netbuf_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[429]"></a>netbuf_ref</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[42a]"></a>netbuf_chain</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[42c]"></a>netbuf_data</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[42d]"></a>netbuf_next</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[42e]"></a>netbuf_first</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[42f]"></a>lwip_gethostbyname</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, netdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
</UL>

<P><STRONG><a name="[430]"></a>lwip_gethostbyname_r</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, netdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[431]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, netdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[432]"></a>lwip_getaddrinfo</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, netdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[433]"></a>do_netifapi_netif_add</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, netifapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = do_netifapi_netif_add &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(.text)
</UL>
<P><STRONG><a name="[435]"></a>do_netifapi_netif_set_addr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, netifapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = do_netifapi_netif_set_addr &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(.text)
</UL>
<P><STRONG><a name="[437]"></a>do_netifapi_netif_common</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, netifapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = do_netifapi_netif_common &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(.text)
</UL>
<P><STRONG><a name="[438]"></a>netifapi_netif_add</STRONG> (Thumb, 44 bytes, Stack size 64 bytes, netifapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[43a]"></a>netifapi_netif_set_addr</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, netifapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>

<P><STRONG><a name="[43b]"></a>netifapi_netif_common</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, netifapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = netifapi_netif_common &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[4a2]"></a>lwip_socket_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[43f]"></a>lwip_accept</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lwip_accept &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
</UL>

<P><STRONG><a name="[440]"></a>lwip_bind</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
</UL>

<P><STRONG><a name="[442]"></a>lwip_close</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethChat
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitEthernetTcp
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_close
</UL>

<P><STRONG><a name="[443]"></a>lwip_connect</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
</UL>

<P><STRONG><a name="[444]"></a>lwip_listen</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lwip_listen &rArr; netconn_listen_with_backlog &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
</UL>

<P><STRONG><a name="[445]"></a>lwip_recvfrom</STRONG> (Thumb, 580 bytes, Stack size 80 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
</UL>

<P><STRONG><a name="[447]"></a>lwip_read</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[448]"></a>lwip_recv</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethChat
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
</UL>

<P><STRONG><a name="[449]"></a>lwip_sendto</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + In Cycle
<LI>Call Chain = lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>

<P><STRONG><a name="[44a]"></a>lwip_send</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEthernetData
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_client
</UL>

<P><STRONG><a name="[44b]"></a>lwip_socket</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
</UL>

<P><STRONG><a name="[44c]"></a>lwip_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[44f]"></a>lwip_select</STRONG> (Thumb, 810 bytes, Stack size 96 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = lwip_select &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethChat
</UL>

<P><STRONG><a name="[450]"></a>lwip_shutdown</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[452]"></a>lwip_getpeername</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[453]"></a>lwip_getsockname</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[454]"></a>lwip_getsockopt</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[455]"></a>lwip_setsockopt</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[456]"></a>lwip_ioctl</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[457]"></a>lwip_fcntl</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[45d]"></a>list_tcp_ip</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[b5]"></a>tcpip_input</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcpip_input &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sys_arch.o(.text)
<LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[3f6]"></a>tcpip_callback_with_block</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_callback
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_callback
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>

<P><STRONG><a name="[45f]"></a>tcpip_timeout</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[460]"></a>tcpip_untimeout</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[3da]"></a>tcpip_apimsg</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[439]"></a>tcpip_netifapi</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
</UL>

<P><STRONG><a name="[461]"></a>tcpip_callbackmsg_new</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[462]"></a>tcpip_callbackmsg_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[463]"></a>tcpip_trycallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>

<P><STRONG><a name="[464]"></a>tcpip_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[467]"></a>pbuf_free_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[468]"></a>mem_free_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[295]"></a>lwip_htons</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
</UL>

<P><STRONG><a name="[441]"></a>lwip_ntohs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[46a]"></a>lwip_htonl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_netmask_valid
</UL>

<P><STRONG><a name="[469]"></a>lwip_ntohl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[480]"></a>dhcp_renew</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[484]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[486]"></a>dhcp_release</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[48a]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[48d]"></a>dhcp_set_struct</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[48e]"></a>dhcp_cleanup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[48f]"></a>dhcp_stop</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dhcp_stop &rArr; udp_remove &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[491]"></a>dhcp_start</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[492]"></a>dhcp_inform</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[493]"></a>dhcp_network_changed</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[495]"></a>dhcp_arp_reply</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[48c]"></a>dns_setserver</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
</UL>

<P><STRONG><a name="[498]"></a>dns_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dns_init &rArr; udp_new &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[503]"></a>dns_getserver</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>

<P><STRONG><a name="[49d]"></a>dns_tmr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
</UL>

<P><STRONG><a name="[425]"></a>dns_gethostbyname</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
</UL>

<P><STRONG><a name="[465]"></a>lwip_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[4a1]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[479]"></a>netif_set_gw</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>

<P><STRONG><a name="[47a]"></a>netif_set_netmask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>

<P><STRONG><a name="[478]"></a>netif_set_ipaddr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>

<P><STRONG><a name="[436]"></a>netif_set_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_set_addr
</UL>

<P><STRONG><a name="[434]"></a>netif_add</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_add
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[4a8]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[477]"></a>netif_set_down</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[4a7]"></a>netif_remove</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[7f5]"></a>netif_find</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[488]"></a>netif_set_up</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[b7]"></a>netif_set_link_up</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>netif_set_link_down</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, netif.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[3f9]"></a>pbuf_free</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_int
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>

<P><STRONG><a name="[297]"></a>pbuf_alloc</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_rx
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[474]"></a>pbuf_realloc</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[4ad]"></a>pbuf_header</STRONG> (Thumb, 724 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = pbuf_header &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[4d5]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[4ae]"></a>pbuf_ref</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = pbuf_ref &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[42b]"></a>pbuf_cat</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = pbuf_cat &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[4af]"></a>pbuf_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[4b0]"></a>pbuf_dechain</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[3f8]"></a>pbuf_copy</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = pbuf_copy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[446]"></a>pbuf_copy_partial</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[4b1]"></a>pbuf_take</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[4b2]"></a>pbuf_coalesce</STRONG> (Thumb, 636 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[4b4]"></a>pbuf_get_at</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>

<P><STRONG><a name="[4b3]"></a>pbuf_memcmp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[4b5]"></a>pbuf_memfind</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</UL>

<P><STRONG><a name="[4b6]"></a>pbuf_strstr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[4ef]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[419]"></a>raw_bind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[41c]"></a>raw_connect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[410]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[421]"></a>raw_sendto</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = raw_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[422]"></a>raw_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[417]"></a>raw_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = raw_remove &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[40f]"></a>raw_new</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = raw_new &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[4a4]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4b9]"></a>tcp_seg_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[4ab]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>

<P><STRONG><a name="[4ba]"></a>tcp_pcb_purge</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4bb]"></a>tcp_slowtmr</STRONG> (Thumb, 812 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = tcp_slowtmr &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[4c0]"></a>tcp_pcb_remove</STRONG> (Thumb, 626 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[408]"></a>tcp_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[4c4]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[3fc]"></a>tcp_recved</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[4c5]"></a>tcp_recv_null</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[4c6]"></a>tcp_process_refused_data</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[4c7]"></a>tcp_fasttmr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[4c8]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[409]"></a>tcp_shutdown</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[4c9]"></a>tcp_abandon</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[416]"></a>tcp_abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[41b]"></a>tcp_bind</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[420]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[4cb]"></a>tcp_eff_send_mss</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[4cc]"></a>tcp_next_iss</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[41e]"></a>tcp_connect</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[7f6]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>tcp_seg_copy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tcp_seg_copy &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4d1]"></a>tcp_alloc</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[413]"></a>tcp_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[402]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[403]"></a>tcp_recv</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = tcp_recv &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[405]"></a>tcp_sent</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[407]"></a>tcp_err</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = tcp_err &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[404]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[406]"></a>tcp_poll</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = tcp_poll &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[7f7]"></a>tcp_debug_state_str</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>tcp_input</STRONG> (Thumb, 1078 bytes, Stack size 40 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[4cd]"></a>tcp_enqueue_flags</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[4c3]"></a>tcp_send_fin</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[3ff]"></a>tcp_write</STRONG> (Thumb, 1452 bytes, Stack size 96 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[4d6]"></a>tcp_send_empty_ack</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[400]"></a>tcp_output</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4bf]"></a>tcp_rst</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcp_rst &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4bd]"></a>tcp_rexmit_rto</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[4d9]"></a>tcp_rexmit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[4d4]"></a>tcp_rexmit_fast</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4be]"></a>tcp_keepalive</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcp_keepalive &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[4bc]"></a>tcp_zero_window_probe</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[45a]"></a>sys_timeout</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[4c2]"></a>tcp_timer_needed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[4a5]"></a>sys_timeouts_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[45b]"></a>sys_untimeout</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sys_untimeout &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[45c]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[4a3]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4e5]"></a>udp_input</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[41a]"></a>udp_bind</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = udp_bind &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[475]"></a>udp_sendto_if</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[423]"></a>udp_sendto</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[424]"></a>udp_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[41d]"></a>udp_connect</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[41f]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
</UL>

<P><STRONG><a name="[412]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[418]"></a>udp_remove</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = udp_remove &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>

<P><STRONG><a name="[411]"></a>udp_new</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = udp_new &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[4e8]"></a>icmp_input</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[4e6]"></a>icmp_dest_unreach</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[4ec]"></a>inet_chksum_pseudo</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, inet_chksum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>

<P><STRONG><a name="[4ee]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, inet_chksum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>

<P><STRONG><a name="[4eb]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>

<P><STRONG><a name="[4e9]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[4b7]"></a>ip_route</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[459]"></a>ip_input</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[4b8]"></a>ip_output_if</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ip_output_if &rArr; pbuf_header &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[4e2]"></a>ip_output</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; pbuf_header &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[4dd]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[4f0]"></a>ip4_addr_netmask_valid</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>

<P><STRONG><a name="[4f1]"></a>ipaddr_aton</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ipaddr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
</UL>

<P><STRONG><a name="[499]"></a>ipaddr_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ipaddr_addr &rArr; ipaddr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>

<P><STRONG><a name="[4f2]"></a>ipaddr_ntoa_r</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>

<P><STRONG><a name="[211]"></a>ipaddr_ntoa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipaddr_ntoa &rArr; ipaddr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_conflict_detection
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_each_txt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
</UL>

<P><STRONG><a name="[20c]"></a>copy_arp_table</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = copy_arp_table
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_log
</UL>

<P><STRONG><a name="[4e4]"></a>etharp_tmr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[4a6]"></a>etharp_cleanup_netif</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[4f8]"></a>etharp_find_addr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[4a9]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[47c]"></a>etharp_query</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[b3]"></a>etharp_output</STRONG> (Thumb, 554 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[458]"></a>ethernet_input</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[4fd]"></a>eth_device_init_with_flag</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnConnectConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
</UL>

<P><STRONG><a name="[29e]"></a>eth_device_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnConnectConfig
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
</UL>

<P><STRONG><a name="[28a]"></a>eth_device_ready</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[29b]"></a>eth_device_linkchange</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = eth_device_linkchange &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>

<P><STRONG><a name="[500]"></a>list_etx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernetif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[501]"></a>list_erx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernetif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[11f]"></a>eth_system_device_init</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = eth_system_device_init &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[12a]"></a>set_if</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = set_if &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[12b]"></a>set_dns</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = set_dns &rArr; ipaddr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[12c]"></a>list_if</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = list_if &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_netif
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[12d]"></a>list_tcps</STRONG> (Thumb, 250 bytes, Stack size 72 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_tcps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[505]"></a>returnClientCurrentLinkStyle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, client.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeSendStatus
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitTcpConnect
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listConnectInfo
</UL>

<P><STRONG><a name="[504]"></a>listConnectInfo</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = listConnectInfo &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnClientCurrentLinkStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_connectInfo
</UL>

<P><STRONG><a name="[506]"></a>return_serverNet_info</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, client.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[507]"></a>quitTcpConnect</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1644<LI>Call Chain = quitTcpConnect &rArr; cleanCbox &rArr; removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitEthernetTcp
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitCC3100Tcp
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanCbox
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnClientCurrentLinkStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_thread_entry
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeEthSendStatus
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_quit
</UL>

<P><STRONG><a name="[7f8]"></a>returnServerLinkStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, client.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>returnNetconfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = returnNetconfig &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_log
</UL>

<P><STRONG><a name="[50b]"></a>returnConfigLinkMothod</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, client.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnConnectConfig
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[4ff]"></a>returnConnectConfig</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = returnConnectConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnConfigLinkMothod
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[50c]"></a>processDataFromServer</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = processDataFromServer &rArr; recvServerData &rArr; WritePool &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_left
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanPool
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCrc16
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvServerData
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethChat
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiChat
</UL>

<P><STRONG><a name="[50f]"></a>sendNormalData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = sendNormalData &rArr; rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packADCInfo
</UL>

<P><STRONG><a name="[510]"></a>sendADCInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = sendADCInfo &rArr; packADCInfo &rArr; sendNormalData &rArr; rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packADCInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
</UL>

<P><STRONG><a name="[512]"></a>judgeSendStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = judgeSendStatus &rArr; judgeWifiSendStatus &rArr; sl_Close &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeWifiSendStatus
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeEthSendStatus
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnClientCurrentLinkStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
</UL>

<P><STRONG><a name="[21f]"></a>sendDataToServer</STRONG> (Thumb, 660 bytes, Stack size 16 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + In Cycle
<LI>Call Chain = sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeSendStatus
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendADCInfo
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNormalData
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitTcpConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_server
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_data
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_thread_entry
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFreqPack
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_ser_heart
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_send_pack
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_PackRegCmd
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkDataFromSubg
</UL>

<P><STRONG><a name="[516]"></a>get_ch</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
</UL>

<P><STRONG><a name="[515]"></a>set_ipaddr</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_ipaddr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ch
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveNetAddr
</UL>

<P><STRONG><a name="[517]"></a>saveNetAddr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = saveNetAddr &rArr; set_ipaddr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpConfig
</UL>

<P><STRONG><a name="[518]"></a>entryEthStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1644<LI>Call Chain = entryEthStatus &rArr; cleanCbox &rArr; removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanCbox
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[519]"></a>exitEthStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1644<LI>Call Chain = exitEthStatus &rArr; cleanCbox &rArr; removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_log_diagnosis
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanCbox
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[51a]"></a>ethWifiStyleStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = ethWifiStyleStart &rArr; ethStyleStart &rArr; rt_hw_stm32_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiStyleStart
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethStyleStart
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultConfig
</UL>

<P><STRONG><a name="[51d]"></a>defaultStyleStart</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = defaultStyleStart &rArr; ethStyleStart &rArr; rt_hw_stm32_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethStyleStart
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultConfig
</UL>

<P><STRONG><a name="[51e]"></a>tcpSend</STRONG> (Thumb, 126 bytes, Stack size 1024 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2668<LI>Call Chain = tcpSend &rArr; quitTcpConnect &rArr; cleanCbox &rArr; removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendEthernetData
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCC3100Data
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitTcpConnect
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnClientCurrentLinkStyle
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client.o(.text)
</UL>
<P><STRONG><a name="[521]"></a>dhcpConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dhcpConfig &rArr; saveNetAddr &rArr; set_ipaddr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveNetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethStyleStart
</UL>

<P><STRONG><a name="[523]"></a>tcp_client_send_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = tcp_client_send_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClient
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultConfig
</UL>

<P><STRONG><a name="[524]"></a>wait_netif_link</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, client.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>

<P><STRONG><a name="[525]"></a>defaultConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = defaultConfig &rArr; ethWifiStyleStart &rArr; ethStyleStart &rArr; rt_hw_stm32_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiStyleStart
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchange_Abox_init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethStyleStart
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_send_init
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultStyleStart
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethWifiStyleStart
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpcheck
</UL>

<P><STRONG><a name="[527]"></a>tcpcheck</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = tcpcheck &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_log_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>tcpclient_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = tcpclient_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[3db]"></a>sys_arch_assert</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_first
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[528]"></a>lwip_system_init</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = lwip_system_init &rArr; tcpip_init &rArr; sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sys_init
</UL>

<P><STRONG><a name="[4a0]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[529]"></a>lwip_sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = lwip_sys_init &rArr; lwip_system_init &rArr; tcpip_init &rArr; sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethStyleStart
</UL>

<P><STRONG><a name="[3f5]"></a>sys_sem_new</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>

<P><STRONG><a name="[3de]"></a>sys_sem_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>

<P><STRONG><a name="[3fd]"></a>sys_sem_signal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_common
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_set_addr
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_netifapi_netif_add
</UL>

<P><STRONG><a name="[3f7]"></a>sys_arch_sem_wait</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>

<P><STRONG><a name="[3dc]"></a>sys_sem_valid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[40b]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[52a]"></a>sys_mutex_new</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>

<P><STRONG><a name="[52b]"></a>sys_mutex_lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[52c]"></a>sys_mutex_unlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[52d]"></a>sys_mutex_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>

<P><STRONG><a name="[7f9]"></a>sys_mutex_valid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)

<P><STRONG><a name="[7fa]"></a>sys_mutex_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>sys_mbox_new</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[3df]"></a>sys_mbox_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = sys_mbox_free &rArr; rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[45e]"></a>sys_mbox_post</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>

<P><STRONG><a name="[3fa]"></a>sys_mbox_trypost</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[3e8]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[415]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[3dd]"></a>sys_mbox_valid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_netifapi
</UL>

<P><STRONG><a name="[40d]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[466]"></a>sys_thread_new</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[52e]"></a>sys_arch_protect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[52f]"></a>sys_arch_unprotect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[530]"></a>sys_jiffies</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[3f0]"></a>sys_now</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</UL>

<P><STRONG><a name="[514]"></a>judgeEthSendStatus</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + In Cycle
<LI>Call Chain = judgeEthSendStatus &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitTcpConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeSendStatus
</UL>

<P><STRONG><a name="[531]"></a>ethChat</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = ethChat &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
</UL>

<P><STRONG><a name="[532]"></a>tcp_eth_recv</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1684<LI>Call Chain = tcp_eth_recv &rArr; exitEthStatus &rArr; cleanCbox &rArr; removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeServerInfo
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethChat
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitEthStatus
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryEthStatus
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnConfigLinkMothod
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth.o(.text)
</UL>
<P><STRONG><a name="[520]"></a>sendEthernetData</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sendEthernetData &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[509]"></a>quitEthernetTcp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = quitEthernetTcp &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitTcpConnect
</UL>

<P><STRONG><a name="[51b]"></a>ethStyleStart</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = ethStyleStart &rArr; rt_hw_stm32_eth_init &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sys_init
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultConfig
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultStyleStart
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethWifiStyleStart
</UL>

<P><STRONG><a name="[12e]"></a>ping</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_recv
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_conflict_detection
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_server
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_table
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ping.o(FSymTab)
</UL>
<P><STRONG><a name="[12f]"></a>cmd_ping</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = cmd_ping &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ping.o(FSymTab)
</UL>
<P><STRONG><a name="[537]"></a>check_cts</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_fifo
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_fifo
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[539]"></a>spi_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cts
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_init
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_reset
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rx_interrupt
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_interrupt
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_start
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_start
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_standby
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_tx_interrupt
</UL>

<P><STRONG><a name="[53b]"></a>enable_tx_interrupt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = enable_tx_interrupt &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[53c]"></a>rf_standby</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, si4463.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[53d]"></a>tx_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tx_start &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[53e]"></a>rx_start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rx_start &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
</UL>

<P><STRONG><a name="[53f]"></a>clr_interrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = clr_interrupt &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvFreqData
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
</UL>

<P><STRONG><a name="[540]"></a>enable_rx_interrupt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = enable_rx_interrupt &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
</UL>

<P><STRONG><a name="[541]"></a>fifo_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = fifo_reset &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvFreqData
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
</UL>

<P><STRONG><a name="[542]"></a>rx_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rx_init &rArr; enable_rx_interrupt &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_reset
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rx_interrupt
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_interrupt
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_start
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeSubgFillter
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvFreqData
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[543]"></a>SI4463_init</STRONG> (Thumb, 830 bytes, Stack size 56 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = SI4463_init &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeSubgFillter
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[544]"></a>sdn_reset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sdn_reset &rArr; rt_spi_send &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeSubgFillter
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[545]"></a>spi_write_fifo</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = spi_write_fifo &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cts
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>

<P><STRONG><a name="[547]"></a>tx_data</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = tx_data &rArr; SI4463_init &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_fifo
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdn_reset
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_reset
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_interrupt
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_start
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_tx_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTestPack3
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTestPack1
</UL>

<P><STRONG><a name="[548]"></a>spi_read_fifo</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = spi_read_fifo &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cts
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvFreqData
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
</UL>

<P><STRONG><a name="[549]"></a>rx_data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rx_data &rArr; fifo_reset &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_fifo
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_reset
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testPackFunc
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
</UL>

<P><STRONG><a name="[54a]"></a>spi_read</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = spi_read &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cts
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSubgInfomation
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRssi
</UL>

<P><STRONG><a name="[54c]"></a>checkDataFromSubg</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, sub_g_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = checkDataFromSubg &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_left
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
</UL>

<P><STRONG><a name="[553]"></a>GPIO_Set</STRONG> (Thumb, 150 bytes, Stack size 36 bytes, sub_g_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_PD_init
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSubgHardware
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_nHIB_init
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine0_Config
</UL>

<P><STRONG><a name="[7fb]"></a>GPIO_AF_Set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sub_g_init.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sub_g_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = EXTI15_10_IRQHandler &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54d]"></a>getRssi</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sub_g_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = getRssi &rArr; spi_read &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAboxEnvironment
</UL>

<P><STRONG><a name="[54e]"></a>sub_PackRegCmd</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, sub_g_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = sub_PackRegCmd &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_reg
</UL>

<P><STRONG><a name="[54f]"></a>recvFreqData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sub_g_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = recvFreqData &rArr; rx_init &rArr; enable_rx_interrupt &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_fifo
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_reset
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAboxEnvironment
</UL>

<P><STRONG><a name="[550]"></a>changeSubgFillter</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sub_g_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = changeSubgFillter &rArr; SI4463_init &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdn_reset
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4463_init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determineAboxState
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseAboxSubgFreq
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAboxEnvironment
</UL>

<P><STRONG><a name="[551]"></a>checkSubgInfomation</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sub_g_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = checkSubgInfomation &rArr; spi_read &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sub_Abox_init_thread_entry
</UL>

<P><STRONG><a name="[552]"></a>initSubgHardware</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, sub_g_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = initSubgHardware &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxThreadInformation
</UL>

<P><STRONG><a name="[176]"></a>at_printf</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flash_crc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_PD_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSetup
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWReboot
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicFirstInfo
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicSecondInfo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicThirdInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicFourthInfo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDicFifthInfo
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPool
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePool
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSerNetConfigFile
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determineAboxState
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assessCboxState
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCbox
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insetCboxHeadData
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addCbox
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeCbox
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDataInfo
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseAboxSubgFreq
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPoolDate
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_heart
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listReport
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_reg
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_DEV_USER_GET_SSTATUS
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSubgHardware
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSubgInfomation
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkDataFromSubg
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethChat
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvServerData
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitEthernetTcp
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packADCInfo
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_send
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeWifiSendStatus
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeEthSendStatus
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethStyleStart
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_netif_link
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitEthStatus
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryEthStatus
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_listCbox
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWlanEventHandler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkNetAppEventHandler
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkHttpServerCallback
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkGeneralEventHandler
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_thread
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiChat
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkSockEventHandler
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;establishConnectionWithAP
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayBanner
</UL>

<P><STRONG><a name="[3cd]"></a>at_print_ctrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exchange.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_close
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ry
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_open
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setid
</UL>

<P><STRONG><a name="[1f4]"></a>at_print_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exchange.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listReport
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugClose
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setid
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setmdn
</UL>

<P><STRONG><a name="[555]"></a>at_print_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exchange.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listReport
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugOpen
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setid
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setmdn
</UL>

<P><STRONG><a name="[50d]"></a>mq_send</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = mq_send &rArr; rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
</UL>

<P><STRONG><a name="[556]"></a>mq_recv</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = mq_recv &rArr; rt_mq_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_thread_entry
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
</UL>

<P><STRONG><a name="[17e]"></a>g3_send_pack</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = g3_send_pack &rArr; Abox_send_pack &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_send_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd122ForScmd4Scmd5
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd1_func
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
</UL>

<P><STRONG><a name="[188]"></a>close_server</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = close_server &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd4_func
</UL>

<P><STRONG><a name="[558]"></a>setSerInfo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
</UL>

<P><STRONG><a name="[3c8]"></a>controlServerInfo</STRONG> (Thumb, 460 bytes, Stack size 256 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerInfo
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readServerInfo
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initServerInfo
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeServerInfo
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpcheck
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;establishConnectionWithAP
</UL>

<P><STRONG><a name="[183]"></a>readServerInfo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = readServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCmd122ForScmd4Scmd5
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getServerNetAdrr
</UL>

<P><STRONG><a name="[55c]"></a>initServerInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = initServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxThreadInformation
</UL>

<P><STRONG><a name="[533]"></a>changeServerInfo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = changeServerInfo &rArr; getServerNetAdrr &rArr; readServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getServerNetAdrr
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[186]"></a>writeServerInfo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = writeServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd4_func
</UL>

<P><STRONG><a name="[55d]"></a>process_DEV_USER_RUPDATA</STRONG> (Thumb, 892 bytes, Stack size 112 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = process_DEV_USER_RUPDATA &rArr; SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g3_send_pack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSetup
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteToFlash
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSaveDataSector
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFlashFile
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_rev_pack
</UL>

<P><STRONG><a name="[55e]"></a>process_DEV_USER_GET_SSTATUS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = process_DEV_USER_GET_SSTATUS &rArr; Abox_DEV_USER_GET_SSTATUS &rArr; send_log_diagnosis &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_DEV_USER_GET_SSTATUS
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_rev_pack
</UL>

<P><STRONG><a name="[560]"></a>changeAboxFreq</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = changeAboxFreq &rArr; saveFreqInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveFreqInfo
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFreqInfo
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_rev_pack
</UL>

<P><STRONG><a name="[563]"></a>searchLogSheet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = searchLogSheet &rArr; send_log_diagnosis &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_diagnosis
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchSheet
</UL>

<P><STRONG><a name="[564]"></a>searchSheet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = searchSheet &rArr; searchLogSheet &rArr; send_log_diagnosis &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchLogSheet
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_rev_pack
</UL>

<P><STRONG><a name="[565]"></a>cdma_rev_pack</STRONG> (Thumb, 124 bytes, Stack size 1040 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2636<LI>Call Chain = cdma_rev_pack &rArr; recv_dic_cmd &rArr; del_smd4_func &rArr; sendCmd122ForScmd4Scmd5 &rArr; readServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_dic_cmd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchSheet
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeAboxFreq
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_GET_SSTATUS
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_thread_entry
</UL>

<P><STRONG><a name="[1fc]"></a>data_left</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data_left
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPool
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkDataFromSubg
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
</UL>

<P><STRONG><a name="[181]"></a>HWReboot</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = HWReboot &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd2_func
</UL>

<P><STRONG><a name="[566]"></a>listReport</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = listReport &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_close
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_open
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_listReport
</UL>

<P><STRONG><a name="[557]"></a>Abox_send_pack</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = Abox_send_pack &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g3_send_pack
</UL>

<P><STRONG><a name="[7fc]"></a>requireServerPoolAcceptLength</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, abox_exchange.o(.text), UNUSED)

<P><STRONG><a name="[50e]"></a>recvServerData</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = recvServerData &rArr; WritePool &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePool
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
</UL>

<P><STRONG><a name="[55f]"></a>Abox_DEV_USER_GET_SSTATUS</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = Abox_DEV_USER_GET_SSTATUS &rArr; send_log_diagnosis &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_diagnosis
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_GET_SSTATUS
</UL>

<P><STRONG><a name="[567]"></a>pack_ser_heart</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_heart
</UL>

<P><STRONG><a name="[569]"></a>ser_heart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_ser_heart
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addCbox
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeCbox
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_timeout
</UL>

<P><STRONG><a name="[56a]"></a>Abox_thread_entry</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2636<LI>Call Chain = Abox_thread_entry &rArr; cdma_rev_pack &rArr; recv_dic_cmd &rArr; del_smd4_func &rArr; sendCmd122ForScmd4Scmd5 &rArr; readServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_rev_pack
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_recv
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitTcpConnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abox_exchange.o(.text)
</UL>
<P><STRONG><a name="[56b]"></a>Led_box_thread_entry</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Led_box_thread_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abox_exchange.o(.text)
</UL>
<P><STRONG><a name="[56c]"></a>Led_roof_thread_entry</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Led_roof_thread_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abox_exchange.o(.text)
</UL>
<P><STRONG><a name="[526]"></a>exchange_Abox_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = exchange_Abox_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultConfig
</UL>

<P><STRONG><a name="[56f]"></a>sendFreqPack</STRONG> (Thumb, 132 bytes, Stack size 120 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = sendFreqPack &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determineAboxState
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseAboxSubgFreq
</UL>

<P><STRONG><a name="[573]"></a>closeLed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = closeLed &rArr; OutputLed &rArr; GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxThreadInformation
</UL>

<P><STRONG><a name="[578]"></a>initCboxInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sub_g_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addCbox
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeCbox
</UL>

<P><STRONG><a name="[577]"></a>removeCbox</STRONG> (Thumb, 392 bytes, Stack size 1048 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620<LI>Call Chain = removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCboxInfo
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processExistingData
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPoolDate
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_heart
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assessCboxState
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanCbox
</UL>

<P><STRONG><a name="[50a]"></a>cleanCbox</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1636<LI>Call Chain = cleanCbox &rArr; removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanPool
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeCbox
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determineAboxState
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitEthStatus
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryEthStatus
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitTcpConnect
</UL>

<P><STRONG><a name="[57c]"></a>addCbox</STRONG> (Thumb, 160 bytes, Stack size 160 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = addCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCboxInfo
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_heart
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvTestPack2
</UL>

<P><STRONG><a name="[57d]"></a>recvTestPack2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = recvTestPack2 &rArr; addCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addCbox
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testPackFunc
</UL>

<P><STRONG><a name="[57e]"></a>testPackFunc</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = testPackFunc &rArr; recvTestPack2 &rArr; addCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvTestPack2
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTestPack3
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTestPack1
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sub_Abox_init_thread_entry
</UL>

<P><STRONG><a name="[582]"></a>txDataResult</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sub_g_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
</UL>

<P><STRONG><a name="[580]"></a>insetCboxHeadData</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = insetCboxHeadData &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
</UL>

<P><STRONG><a name="[583]"></a>traverseCbox</STRONG> (Thumb, 88 bytes, Stack size 1048 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2876<LI>Call Chain = traverseCbox &rArr; sendCheckPack &rArr; checkDataFromSubg &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPoolDate
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sub_Abox_init_thread_entry
</UL>

<P><STRONG><a name="[584]"></a>assessCboxState</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668<LI>Call Chain = assessCboxState &rArr; removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeCbox
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sub_Abox_init_thread_entry
</UL>

<P><STRONG><a name="[585]"></a>determineAboxState</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1668<LI>Call Chain = determineAboxState &rArr; cleanCbox &rArr; removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFreqPack
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseAboxSubgFreq
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeSubgFillter
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanCbox
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sub_Abox_init_thread_entry
</UL>

<P><STRONG><a name="[586]"></a>rt_sub_Abox_init_thread_entry</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2876<LI>Call Chain = rt_sub_Abox_init_thread_entry &rArr; traverseCbox &rArr; sendCheckPack &rArr; checkDataFromSubg &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determineAboxState
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assessCboxState
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCbox
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testPackFunc
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseAboxSubgFreq
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxThreadInformation
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxInformation
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSubgInfomation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sub_g_a.o(.text)
</UL>
<P><STRONG><a name="[1f3]"></a>subg_Abox_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = subg_Abox_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[511]"></a>packADCInfo</STRONG> (Thumb, 116 bytes, Stack size 128 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = packADCInfo &rArr; sendNormalData &rArr; rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusCrc16
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNormalData
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendADCInfo
</UL>

<P><STRONG><a name="[3c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = EXTI9_5_IRQHandler &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1dd]"></a>rt_system_PD_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_system_PD_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[22e]"></a>DefaultSetup</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = DefaultSetup &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAppVertion
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[587]"></a>Read_hard_status</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Read_hard_status &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSetup
</UL>

<P><STRONG><a name="[1f2]"></a>ReadSetup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ReadSetup &rArr; Read_hard_status &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadMoreByte
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_hard_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[16e]"></a>SaveSetup</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDicnary1
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setgprs
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setport
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setpass
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setuser
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_id
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_mdn
</UL>

<P><STRONG><a name="[572]"></a>initFreqInfo</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initFreqInfo &rArr; STMFLASH_ReadMoreByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadMoreByte
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxInformation
</UL>

<P><STRONG><a name="[561]"></a>checkFreqInfo</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = checkFreqInfo &rArr; STMFLASH_ReadMoreByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadMoreByte
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseAboxSubgFreq
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeAboxFreq
</UL>

<P><STRONG><a name="[562]"></a>saveFreqInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = saveFreqInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseAboxSubgFreq
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFreqDefault
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeAboxFreq
</UL>

<P><STRONG><a name="[1d0]"></a>OutputLed</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OutputLed &rArr; GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConnectStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_thread_entry
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeLed
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_roof_thread_entry
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_box_thread_entry
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethChat
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_send
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryEthStatus
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiChat
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[588]"></a>STMFLASH_ReadWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>

<P><STRONG><a name="[55a]"></a>STMFLASH_Read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, flash_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAppVertion
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFlashFile
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
</UL>

<P><STRONG><a name="[16d]"></a>getAppVertion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getAppVertion &rArr; STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDicnary1
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultSetup
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_log
</UL>

<P><STRONG><a name="[58c]"></a>STMFLASH_GetFlashSector</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, flash_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSaveDataSector
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
</UL>

<P><STRONG><a name="[3c4]"></a>writeByteToFlash</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, flash_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DataCacheCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_tof
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataSet
</UL>

<P><STRONG><a name="[58b]"></a>STMFLASH_ReadByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadMoreByte
</UL>

<P><STRONG><a name="[1e3]"></a>STMFLASH_ReadMoreByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STMFLASH_ReadMoreByte
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSetup
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flash_crc
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFreqInfo
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSecret_1
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFreqInfo
</UL>

<P><STRONG><a name="[559]"></a>setSecret_1</STRONG> (Thumb, 222 bytes, Stack size 640 bytes, flash_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadMoreByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DataCacheCmd
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteToFlash
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_GetFlashSector
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSetup
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveFreqInfo
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSerInfo
</UL>

<P><STRONG><a name="[58d]"></a>STMFLASH_Write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, flash_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DataCacheCmd
</UL>

<P><STRONG><a name="[3c6]"></a>clearSaveDataSector</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, flash_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = clearSaveDataSector &rArr; FLASH_EraseSector &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DataCacheCmd
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_GetFlashSector
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataSet
</UL>

<P><STRONG><a name="[3c5]"></a>checkFlashFile</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, flash_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = checkFlashFile &rArr; calc_flash_crc &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flash_crc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataSet
</UL>

<P><STRONG><a name="[130]"></a>cmd_reboot</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = cmd_reboot &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_smd4_func
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ry
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_thread_entry
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abox_thread_entry
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_DEV_USER_RUPDATA
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setport
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setid
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[13e]"></a>cmd_cls</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = cmd_cls &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[131]"></a>cmd_ps</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[132]"></a>cmd_sem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = cmd_sem &rArr; list_sem &rArr; _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[133]"></a>cmd_event</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = cmd_event &rArr; list_event &rArr; _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[134]"></a>cmd_mt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = cmd_mt &rArr; list_mutex &rArr; _list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[135]"></a>cmd_quit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1652<LI>Call Chain = cmd_quit &rArr; quitTcpConnect &rArr; cleanCbox &rArr; removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitTcpConnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[136]"></a>cmd_sendlog</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = cmd_sendlog &rArr; send_log_diagnosis &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_diagnosis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[137]"></a>cmd_mb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = cmd_mb &rArr; list_mailbox &rArr; _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[138]"></a>cmd_mq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = cmd_mq &rArr; list_msgqueue &rArr; _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[139]"></a>cmd_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = cmd_timer &rArr; list_timer &rArr; _list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[13a]"></a>cmd_device</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = cmd_device &rArr; list_device &rArr; _list_device &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[13b]"></a>cmd_free</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = cmd_free &rArr; list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[13c]"></a>cmd_tcp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = cmd_tcp &rArr; list_tcps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[13d]"></a>cmd_netif</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = cmd_netif &rArr; list_if &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[13f]"></a>cmd_time</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = cmd_time &rArr; set_time &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[140]"></a>cmd_date</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = cmd_date &rArr; set_date &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[141]"></a>cmd_clk</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = cmd_clk &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[58f]"></a>updata_mdn</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = updata_mdn &rArr; SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSetup
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setmdn
</UL>

<P><STRONG><a name="[142]"></a>cmd_setmdn</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = cmd_setmdn &rArr; updata_mdn &rArr; SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_close
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_open
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_mdn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[590]"></a>updata_id</STRONG> (Thumb, 820 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = updata_id &rArr; SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSetup
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setid
</UL>

<P><STRONG><a name="[143]"></a>cmd_setid</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = cmd_setid &rArr; updata_id &rArr; SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_close
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_auto_open
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_auto_close
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_ctrl
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_open
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[144]"></a>cmd_testflash</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = cmd_testflash &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[145]"></a>cmd_listCbox</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = cmd_listCbox &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[146]"></a>cmd_setfreq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = cmd_setfreq &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[147]"></a>cmd_setuser</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = cmd_setuser &rArr; SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSetup
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[148]"></a>cmd_setpass</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = cmd_setpass &rArr; SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSetup
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[149]"></a>cmd_debugClose</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_debugClose
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[14a]"></a>cmd_debugOpen</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_debugOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_print_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[14b]"></a>cmd_connectInfo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = cmd_connectInfo &rArr; listConnectInfo &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listConnectInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[14c]"></a>cmd_setport</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = cmd_setport &rArr; SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSetup
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[14d]"></a>cmd_setgprs</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = cmd_setgprs &rArr; SaveSetup &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[14e]"></a>cmd_uimcode</STRONG> (Thumb, 956 bytes, Stack size 152 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = cmd_uimcode &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[14f]"></a>cmd_sim</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = cmd_sim &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[150]"></a>cmd_ver</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = cmd_ver &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[151]"></a>cmd_telnet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = cmd_telnet &rArr; telnet_server &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[152]"></a>cmd_listReport</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, my_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = cmd_listReport &rArr; listReport &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[153]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[154]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmd.o(FSymTab)
<LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[155]"></a>list_thread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmd.o(FSymTab)
<LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[156]"></a>list_sem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list_sem &rArr; _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sem
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmd.o(FSymTab)
<LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[157]"></a>list_event</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list_event &rArr; _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_event
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmd.o(FSymTab)
<LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[158]"></a>list_mutex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = list_mutex &rArr; _list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmd.o(FSymTab)
<LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[159]"></a>list_mailbox</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = list_mailbox &rArr; _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mb
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmd.o(FSymTab)
<LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[15a]"></a>list_msgqueue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list_msgqueue &rArr; _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mq
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmd.o(FSymTab)
<LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[15b]"></a>list_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = list_timer &rArr; _list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_timer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmd.o(FSymTab)
<LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[15c]"></a>list_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = list_device &rArr; _list_device &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_device
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cmd.o(FSymTab)
<LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[15d]"></a>list</STRONG> (Thumb, 1122 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[59d]"></a>list_prefix</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = list_prefix &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_is_prefix
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[5a3]"></a>finsh_compiler_run</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = finsh_compiler_run &rArr; finsh_compile &rArr;  finsh_compile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[5b1]"></a>finsh_error_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[5a1]"></a>finsh_error_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>

<P><STRONG><a name="[5f0]"></a>finsh_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[5f1]"></a>finsh_error_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[5a5]"></a>finsh_heap_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_heap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[5a6]"></a>finsh_heap_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_merge
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
</UL>

<P><STRONG><a name="[5ab]"></a>finsh_heap_allocate</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_split
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
</UL>

<P><STRONG><a name="[5ad]"></a>finsh_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_init &rArr; finsh_var_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[5f3]"></a>finsh_stack_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[5b2]"></a>finsh_flush</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, finsh_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_flush &rArr; finsh_parser_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[5b3]"></a>finsh_reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, finsh_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
</UL>

<P><STRONG><a name="[5af]"></a>finsh_node_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_init
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[5b6]"></a>finsh_node_allocate</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[5b4]"></a>finsh_node_new_id</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = finsh_node_new_id &rArr; finsh_var_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[5b9]"></a>finsh_node_new_char</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_new_char
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[5ba]"></a>finsh_node_new_int</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_new_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[5bb]"></a>finsh_node_new_long</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_new_long
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[5bc]"></a>finsh_node_new_string</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = finsh_node_new_string &rArr; finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[5be]"></a>finsh_node_new_ptr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_new_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[e1]"></a>OP_no_op</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>OP_add_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>OP_add_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>OP_add_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>OP_sub_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>OP_sub_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>OP_sub_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>OP_div_byte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>OP_div_word</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>OP_div_dword</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>OP_mod_byte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, finsh_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OP_mod_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>OP_mod_word</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, finsh_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OP_mod_word
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>OP_mod_dword</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OP_mod_dword
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>OP_mul_byte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>OP_mul_word</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>OP_mul_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>OP_and_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>OP_and_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>OP_and_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>OP_or_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>OP_or_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>OP_or_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>OP_xor_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>OP_xor_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>OP_xor_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>OP_bw_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>OP_bw_word</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>OP_bw_dword</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>OP_shl_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>OP_shl_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>OP_shl_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>OP_shr_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>OP_shr_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>OP_shr_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>OP_ld_byte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>OP_ld_word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>OP_ld_dword</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>OP_ld_value_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>OP_ld_value_byte_stack</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>OP_ld_value_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>OP_ld_value_word_stack</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>OP_ld_value_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>OP_ld_value_dword_stack</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>OP_st_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>OP_st_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>OP_st_dword</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>OP_pop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>OP_call</STRONG> (Thumb, 524 bytes, Stack size 128 bytes, finsh_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OP_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[5d3]"></a>finsh_parser_run</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[5ae]"></a>finsh_parser_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_parser_init
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[5d4]"></a>finsh_token_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_token_init
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[5dd]"></a>token_get_string</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_get_string &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[5c2]"></a>finsh_token_token</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
</UL>

<P><STRONG><a name="[5e0]"></a>finsh_token_get_token</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finsh_token.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[5b0]"></a>finsh_var_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_var_init
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[5d1]"></a>finsh_var_insert</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = finsh_var_insert &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
</UL>

<P><STRONG><a name="[5e1]"></a>finsh_var_delete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, finsh_var.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[5b5]"></a>finsh_var_lookup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_var_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[5e2]"></a>finsh_sysvar_append</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, finsh_var.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[5b7]"></a>finsh_sysvar_lookup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_sysvar_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[5f2]"></a>finsh_vm_run</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, finsh_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_vm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[5e3]"></a>finsh_syscall_append</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, finsh_vm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[5b8]"></a>finsh_syscall_lookup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, finsh_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_syscall_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[5eb]"></a>msh_is_used</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[15f]"></a>msh_help</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[5e7]"></a>msh_exec</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = msh_exec &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[5e8]"></a>msh_auto_complete</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[5ea]"></a>finsh_get_prompt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_get_prompt
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[5ed]"></a>finsh_set_device</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_close
</UL>

<P><STRONG><a name="[7fd]"></a>finsh_get_device</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text), UNUSED)

<P><STRONG><a name="[601]"></a>finsh_set_echo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_close
</UL>

<P><STRONG><a name="[602]"></a>finsh_get_echo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
</UL>

<P><STRONG><a name="[5ef]"></a>finsh_run_line</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_vm_run
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_stack_bottom
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_string
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_errno
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[5f6]"></a>finsh_thread_entry</STRONG> (Thumb, 1082 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = finsh_thread_entry &rArr; finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[5f8]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[5f9]"></a>finsh_system_var_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[121]"></a>finsh_system_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = finsh_system_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_var_init
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[18b]"></a>telnet_server</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = telnet_server &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_dic_cmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_telnet
</UL>

<P><STRONG><a name="[1bf]"></a>open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_file
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
</UL>

<P><STRONG><a name="[1c0]"></a>close</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_file
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
</UL>

<P><STRONG><a name="[1cb]"></a>read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_img_crc
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readspeed
</UL>

<P><STRONG><a name="[1cd]"></a>write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_file
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writespeed
</UL>

<P><STRONG><a name="[1e5]"></a>lseek</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_file
</UL>

<P><STRONG><a name="[1c3]"></a>rename</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_file
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
</UL>

<P><STRONG><a name="[1b8]"></a>unlink</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_file
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdall
</UL>

<P><STRONG><a name="[60a]"></a>stat</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>

<P><STRONG><a name="[60b]"></a>fstat</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[60c]"></a>fsync</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_flush
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[60e]"></a>statfs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>

<P><STRONG><a name="[160]"></a>mkdir</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = mkdir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makediskdir
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[60f]"></a>rmdir</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[1a8]"></a>opendir</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdall
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makediskdir
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[1b9]"></a>readdir</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdall
</UL>

<P><STRONG><a name="[610]"></a>telldir</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[611]"></a>seekdir</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[612]"></a>rewinddir</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[1a9]"></a>closedir</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = closedir &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdall
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makediskdir
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[161]"></a>chdir</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = chdir &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[615]"></a>getcwd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>

<P><STRONG><a name="[122]"></a>dfs_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dfs_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[613]"></a>dfs_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[614]"></a>dfs_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[604]"></a>fd_new</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = fd_new &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[605]"></a>fd_get</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = fd_get &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
</UL>

<P><STRONG><a name="[606]"></a>fd_put</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = fd_put &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
</UL>

<P><STRONG><a name="[1b1]"></a>dfs_normalize_path</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[616]"></a>fd_is_open</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, dfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[618]"></a>dfs_subdir</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_subdir
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>

<P><STRONG><a name="[1ae]"></a>dfs_file_open</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>

<P><STRONG><a name="[1b3]"></a>dfs_file_close</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>

<P><STRONG><a name="[7fe]"></a>dfs_file_ioctl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dfs_file.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>dfs_file_read</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[1b0]"></a>dfs_file_getdents</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[609]"></a>dfs_file_unlink</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
</UL>

<P><STRONG><a name="[1c5]"></a>dfs_file_write</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[60d]"></a>dfs_file_flush</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</UL>

<P><STRONG><a name="[607]"></a>dfs_file_lseek</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
</UL>

<P><STRONG><a name="[1b2]"></a>dfs_file_stat</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
</UL>

<P><STRONG><a name="[608]"></a>dfs_file_rename</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[619]"></a>dfs_register</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[617]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[61a]"></a>dfs_filesystem_get_mounted_path</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>

<P><STRONG><a name="[61b]"></a>dfs_filesystem_get_partition</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[61c]"></a>dfs_mount</STRONG> (Thumb, 372 bytes, Stack size 88 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[61d]"></a>dfs_unmount</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[61e]"></a>dfs_mkfs</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dfs_mkfs &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
</UL>

<P><STRONG><a name="[1ab]"></a>dfs_statfs</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disksize
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[162]"></a>mkfs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mkfs &rArr; dfs_mkfs &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[163]"></a>df</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[61f]"></a>rt_i2c_bus_device_register</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2c_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</UL>

<P><STRONG><a name="[621]"></a>rt_i2c_bus_device_find</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, i2c_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[622]"></a>rt_i2c_transfer</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>

<P><STRONG><a name="[623]"></a>rt_i2c_master_send</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
</UL>

<P><STRONG><a name="[624]"></a>rt_i2c_master_recv</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, i2c_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
</UL>

<P><STRONG><a name="[123]"></a>rt_i2c_core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> i2c_core.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[620]"></a>rt_i2c_bus_device_device_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, i2c_dev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>

<P><STRONG><a name="[625]"></a>rt_device_pin_register</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>

<P><STRONG><a name="[164]"></a>rt_pin_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pin.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[165]"></a>rt_pin_write</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pin.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[166]"></a>rt_pin_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pin.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[58e]"></a>time</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
</UL>

<P><STRONG><a name="[168]"></a>set_date</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = set_date &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[169]"></a>set_time</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = set_time &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[167]"></a>list_date</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = list_date &rArr; time &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[1a1]"></a>rt_spi_bus_register</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
</UL>

<P><STRONG><a name="[1a5]"></a>rt_spi_bus_attach_device</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi3_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
</UL>

<P><STRONG><a name="[554]"></a>rt_spi_configure</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_spi_configure &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSubgHardware
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_Init
</UL>

<P><STRONG><a name="[546]"></a>rt_spi_send_then_send</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_fifo
</UL>

<P><STRONG><a name="[538]"></a>rt_spi_send_then_recv</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_fifo
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cts
</UL>

<P><STRONG><a name="[54b]"></a>rt_spi_transfer</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>

<P><STRONG><a name="[629]"></a>rt_spi_transfer_message</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[62a]"></a>rt_spi_take_bus</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[62b]"></a>rt_spi_release_bus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[62c]"></a>rt_spi_take</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>

<P><STRONG><a name="[62d]"></a>rt_spi_release</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>

<P><STRONG><a name="[627]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[628]"></a>rt_spidev_device_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>

<P><STRONG><a name="[2aa]"></a>rt_hw_serial_register</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[2a6]"></a>rt_hw_serial_isr</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[62f]"></a>rt_completion_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_completion_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[630]"></a>rt_completion_wait</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[634]"></a>rt_completion_done</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[62e]"></a>rt_data_queue_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[631]"></a>rt_data_queue_push</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[632]"></a>rt_data_queue_pop</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[633]"></a>rt_data_queue_peak</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_data_queue_peak
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[637]"></a>rt_data_queue_reset</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dataqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>

<P><STRONG><a name="[603]"></a>rt_ringbuffer_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ringbuffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_server
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
</UL>

<P><STRONG><a name="[5fd]"></a>rt_ringbuffer_put</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_ringbuffer_put &rArr; rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_option_to_client
</UL>

<P><STRONG><a name="[63a]"></a>rt_ringbuffer_put_force</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[5fb]"></a>rt_ringbuffer_get</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_ringbuffer_get &rArr; rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_read
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_client
</UL>

<P><STRONG><a name="[5ff]"></a>rt_ringbuffer_putchar</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_ringbuffer_putchar &rArr; rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_write
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rx
</UL>

<P><STRONG><a name="[63b]"></a>rt_ringbuffer_putchar_force</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>

<P><STRONG><a name="[63c]"></a>rt_ringbuffer_getchar</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[7ff]"></a>rt_ringbuffer_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ringbuffer.o(.text), UNUSED)

<P><STRONG><a name="[63d]"></a>rt_ringbuffer_create</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
</UL>

<P><STRONG><a name="[63e]"></a>rt_ringbuffer_destroy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[63f]"></a>HCD_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usb_hcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[693]"></a>HCD_GetCurrentSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[646]"></a>HCD_ResetPort</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_hcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[66f]"></a>HCD_IsDeviceConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConnectStatus
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Write
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Read
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Status
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataSet
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[68b]"></a>HCD_GetCurrentFrame</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[675]"></a>HCD_GetURB_State</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[673]"></a>HCD_GetXferCnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
</UL>

<P><STRONG><a name="[800]"></a>HCD_GetHCState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(.text), UNUSED)

<P><STRONG><a name="[648]"></a>HCD_HC_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_hcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>

<P><STRONG><a name="[64a]"></a>HCD_SubmitRequest</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_hcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IsocSendData
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IsocReceiveData
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptSendData
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
</UL>

<P><STRONG><a name="[659]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[65f]"></a>USBH_Open_Channel</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usbh_hcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[660]"></a>USBH_Modify_Channel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbh_hcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBH_Modify_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[661]"></a>USBH_Alloc_Channel</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_hcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Alloc_Channel
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[676]"></a>USBH_Free_Channel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_hcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
</UL>

<P><STRONG><a name="[695]"></a>USBH_DeAllocate_AllChannel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_hcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[663]"></a>USBH_CtlReq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOTReset
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetInterface
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
</UL>

<P><STRONG><a name="[665]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_CtlSendSetup &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[666]"></a>USBH_CtlSendData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[667]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[668]"></a>USBH_BulkSendData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[669]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbh_ioreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[66a]"></a>USBH_InterruptReceiveData</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[66b]"></a>USBH_InterruptSendData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[66c]"></a>USBH_IsocReceiveData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[66d]"></a>USBH_IsocSendData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbh_ioreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[66e]"></a>USBH_MSC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbh_msc_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[670]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbh_msc_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[672]"></a>USBH_MSC_DecodeCSW</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbh_msc_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_DecodeCSW
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetXferCnt
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[674]"></a>USBH_MSC_HandleBOTXfer</STRONG> (Thumb, 588 bytes, Stack size 48 bytes, usbh_msc_bot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Write
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Read
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[67a]"></a>USBH_MSC_ErrorHandle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbh_msc_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[679]"></a>USBH_MSC_TestUnitReady</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_TestUnitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[67b]"></a>USBH_MSC_ReadCapacity10</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ReadCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[67c]"></a>USBH_MSC_ModeSense6</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ModeSense6
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[67d]"></a>USBH_MSC_RequestSense</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_RequestSense
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[67e]"></a>USBH_MSC_Write10</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_Write10
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Write
</UL>

<P><STRONG><a name="[67f]"></a>USBH_MSC_Read10</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, usbh_msc_scsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_MSC_Read10
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Read
</UL>

<P><STRONG><a name="[680]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USB_OTG_BSP_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[681]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[801]"></a>USB_OTG_BSP_DisableInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_bsp.o(.text), UNUSED)

<P><STRONG><a name="[69f]"></a>USB_OTG_BSP_DriveVBUS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[689]"></a>USB_OTG_BSP_ConfigVBUS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[697]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>

<P><STRONG><a name="[682]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[68]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>USBH_USR_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_USR_Init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBH_USR_DeviceAttached</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_DeviceAttached &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBH_USR_DeviceDisconnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_DeviceDisconnected &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBH_USR_ResetDevice</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_ResetDevice &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBH_USR_DeviceSpeedDetected</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_DeviceSpeedDetected &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBH_USR_Device_DescAvailable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_USR_Device_DescAvailable &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBH_USR_DeviceAddressAssigned</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_DeviceAddressAssigned &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBH_USR_Configuration_DescAvailable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_Configuration_DescAvailable &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBH_USR_Manufacturer_String</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_Manufacturer_String &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBH_USR_Product_String</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_Product_String &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBH_USR_SerialNum_String</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_SerialNum_String &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBH_USR_EnumerationDone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_EnumerationDone &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBH_USR_DeviceNotSupported</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_DeviceNotSupported &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBH_USR_UserInput</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_USR_UserInput &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBH_USR_OverCurrentDetected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_OverCurrentDetected &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBH_USR_MSC_Application</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1900<LI>Call Chain = USBH_USR_MSC_Application &rArr; USH_User_App &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBH_USR_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBH_USR_UnrecoveredError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_USR_UnrecoveredError &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[684]"></a>USBH_UDISK_Status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_UDISK_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[685]"></a>USBH_UDISK_Read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBH_UDISK_Read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[686]"></a>USBH_UDISK_Write</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usbh_usr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[19]"></a>USBH_Connected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBH_Disconnected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBH_SOF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[687]"></a>USBH_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[688]"></a>USBH_Init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbDisk_thread_entry
</UL>

<P><STRONG><a name="[68a]"></a>USBH_HandleControl</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[694]"></a>USBH_ErrorHandle</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_ErrorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[692]"></a>USBH_Process</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeAllocate_AllChannel
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentSpeed
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ErrorHandle
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbDisk_thread_entry
</UL>

<P><STRONG><a name="[655]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[658]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
</UL>

<P><STRONG><a name="[640]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[642]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[645]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[641]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[698]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
</UL>

<P><STRONG><a name="[699]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_StopHost
</UL>

<P><STRONG><a name="[643]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[69b]"></a>USB_OTG_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>

<P><STRONG><a name="[69a]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>

<P><STRONG><a name="[65a]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsHostMode
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[65b]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[802]"></a>USB_OTG_ReadOtgItr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(.text), UNUSED)

<P><STRONG><a name="[69c]"></a>USB_OTG_EnableHostInt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EnableHostInt
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[6a0]"></a>USB_OTG_ReadHPRT0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[69e]"></a>USB_OTG_DriveVbus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USB_OTG_DriveVbus &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[647]"></a>USB_OTG_ResetPort</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
</UL>

<P><STRONG><a name="[64d]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[644]"></a>USB_OTG_CoreInitHost</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = USB_OTG_CoreInitHost &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[6a1]"></a>USB_OTG_IsEvenFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[653]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[649]"></a>USB_OTG_HC_Init</STRONG> (Thumb, 316 bytes, Stack size 36 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_Init
</UL>

<P><STRONG><a name="[64b]"></a>USB_OTG_HC_StartXfer</STRONG> (Thumb, 288 bytes, Stack size 52 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[64f]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[650]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[6a2]"></a>USB_OTG_StopHost</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usb_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>

<P><STRONG><a name="[6a3]"></a>USBH_GetDescriptor</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[68d]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[6a6]"></a>USBH_GetNextDesc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_stdreq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[68f]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[690]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[68e]"></a>USBH_SetAddress</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[691]"></a>USBH_SetCfg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[6aa]"></a>USBH_SetInterface</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbh_stdreq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[671]"></a>USBH_ClrFeature</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
</UL>

<P><STRONG><a name="[6ab]"></a>searchCharacter</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = searchCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSerNetConfigFile
</UL>

<P><STRONG><a name="[6ac]"></a>clearStrInfo</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clearStrInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSerNetConfigFile
</UL>

<P><STRONG><a name="[3c7]"></a>handleSerNetConfigFile</STRONG> (Thumb, 398 bytes, Stack size 232 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = handleSerNetConfigFile &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearStrInfo
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchCharacter
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_end
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetSet
</UL>

<P><STRONG><a name="[6ad]"></a>readNetSet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = readNetSet &rArr; handleSerNetConfigFile &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSerNetConfigFile
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>

<P><STRONG><a name="[6b0]"></a>updataSet</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = updataSet &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_auto_close
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteToFlash
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSaveDataSector
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFlashFile
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>

<P><STRONG><a name="[219]"></a>USB_ConnectStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_usbh.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
</UL>

<P><STRONG><a name="[21b]"></a>open_log_file</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = open_log_file &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
</UL>

<P><STRONG><a name="[21c]"></a>close_log_file</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = close_log_file &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
</UL>

<P><STRONG><a name="[214]"></a>write_log_file</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = write_log_file &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_log_file
</UL>

<P><STRONG><a name="[683]"></a>USH_User_App</STRONG> (Thumb, 334 bytes, Stack size 808 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1884<LI>Call Chain = USH_User_App &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_auto_open
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwdg_auto_close
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_print_log
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_log_diagnosis
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_getfree
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataSet
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetSet
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_MSC_Application
</UL>

<P><STRONG><a name="[6b7]"></a>usbDefault</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbDefault &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbDisk_thread_entry
</UL>

<P><STRONG><a name="[6b8]"></a>rt_usbDisk_thread_entry</STRONG> (Thumb, 344 bytes, Stack size 8 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_usbDisk_thread_entry &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbDefault
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>stm_usbh_register</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_usbh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = stm_usbh_register &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usbh.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[6ba]"></a>disk_initialize</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize &rArr; USBH_UDISK_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[6e4]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[6bb]"></a>disk_read</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = disk_read &rArr; USBH_UDISK_Read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[6bc]"></a>disk_write</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UDISK_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[6c6]"></a>disk_ioctl</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[6e6]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[6bd]"></a>ff_memalloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6be]"></a>ff_memfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ff_memfree &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6b9]"></a>exfuns_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, exfuns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = exfuns_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_usbDisk_thread_entry
</UL>

<P><STRONG><a name="[6c0]"></a>char_upper</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exfuns.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
</UL>

<P><STRONG><a name="[6bf]"></a>f_typetell</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, exfuns.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_upper
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[6b5]"></a>exf_getfree</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, exfuns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = exf_getfree &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>

<P><STRONG><a name="[6cc]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[6c7]"></a>get_fat</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[6c8]"></a>put_fat</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[6cb]"></a>dir_sdi</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
</UL>

<P><STRONG><a name="[6b4]"></a>f_mount</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>

<P><STRONG><a name="[6b1]"></a>f_open</STRONG> (Thumb, 372 bytes, Stack size 96 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_log_file
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>

<P><STRONG><a name="[6af]"></a>f_read</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataSet
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetSet
</UL>

<P><STRONG><a name="[6b3]"></a>f_write</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_log_file
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[6e9]"></a>f_sync</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[6b2]"></a>f_close</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_log_file
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>

<P><STRONG><a name="[6ae]"></a>f_lseek</STRONG> (Thumb, 584 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updataSet
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readNetSet
</UL>

<P><STRONG><a name="[6ea]"></a>f_opendir</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[6eb]"></a>f_closedir</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[6ec]"></a>f_readdir</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[6ed]"></a>f_stat</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[6c1]"></a>f_getfree</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exf_getfree
</UL>

<P><STRONG><a name="[6ee]"></a>f_truncate</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[6ef]"></a>f_unlink</STRONG> (Thumb, 192 bytes, Stack size 112 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[6f0]"></a>f_mkdir</STRONG> (Thumb, 374 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[6f1]"></a>f_chmod</STRONG> (Thumb, 106 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[6f2]"></a>f_utime</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[6f3]"></a>f_rename</STRONG> (Thumb, 298 bytes, Stack size 136 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[6f4]"></a>f_getlabel</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[6f5]"></a>f_setlabel</STRONG> (Thumb, 396 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[6b6]"></a>f_mkfs</STRONG> (Thumb, 1314 bytes, Stack size 80 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USH_User_App
</UL>

<P><STRONG><a name="[6f6]"></a>f_gets</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[6f8]"></a>f_putc</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[6f9]"></a>f_puts</STRONG> (Thumb, 70 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[6fa]"></a>f_printf</STRONG> (Thumb, 574 bytes, Stack size 152 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[6dc]"></a>ff_convert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mycc936.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
</UL>

<P><STRONG><a name="[6d0]"></a>ff_wtoupper</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mycc936.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
</UL>

<P><STRONG><a name="[6fb]"></a>sl_NetAppStart</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, netapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[6fd]"></a>sl_NetAppStop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[6fe]"></a>sl_NetAppGetServiceList</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, netapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[700]"></a>sl_NetAppMDNSRegisterUnregisterService</STRONG> (Thumb, 148 bytes, Stack size 312 bytes, netapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMemZero
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSUnRegisterService
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterService
</UL>

<P><STRONG><a name="[702]"></a>sl_NetAppMDNSRegisterService</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, netapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
</UL>

<P><STRONG><a name="[703]"></a>sl_NetAppMDNSUnRegisterService</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, netapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[704]"></a>sl_NetAppDnsGetHostByService</STRONG> (Thumb, 198 bytes, Stack size 80 bytes, netapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitForever
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectAsyncRespSetting
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[115]"></a>_sl_HandleAsync_DnsGetHostByService</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, netapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sl_HandleAsync_DnsGetHostByService &rArr; _SlDrvSyncObjSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_driver.o(.constdata)
</UL>
<P><STRONG><a name="[803]"></a>_sl_HandleAsync_DnsGetHostByAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, netapp.o(.text), UNUSED)

<P><STRONG><a name="[709]"></a>sl_NetAppDnsGetHostByName</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, netapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitForever
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[114]"></a>_sl_HandleAsync_DnsGetHostByName</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, netapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _sl_HandleAsync_DnsGetHostByName &rArr; _SlDrvProtectionObjLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_driver.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>_sl_HandleAsync_PingResponse</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, netapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = _sl_HandleAsync_PingResponse &rArr; _SlDrvProtectionObjLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPingResultsToReport
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wifi_driver.o(.text)
<LI> wifi_driver.o(.constdata)
</UL>
<P><STRONG><a name="[70e]"></a>sl_NetAppPingStart</STRONG> (Thumb, 312 bytes, Stack size 88 bytes, netapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitTimeout
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPingResultsToReport
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[713]"></a>sl_NetAppSet</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, netapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[714]"></a>_sl_NetAppSendTokenValue</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, netapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = _sl_NetAppSendTokenValue &rArr; _SlDrvCmdSend &rArr; _SlDrvMsgWrite &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdSend
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>

<P><STRONG><a name="[716]"></a>sl_NetAppGet</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, netapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[da]"></a>_SlDrvNetAppEventHandler</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, netapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = _SlDrvNetAppEventHandler &rArr; _sl_NetAppSendTokenValue &rArr; _SlDrvCmdSend &rArr; _SlDrvMsgWrite &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDispatchHttpServerEvents
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_NetAppSendTokenValue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_driver.o(.text)
</UL>
<P><STRONG><a name="[718]"></a>sl_NetCfgSet</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, netcfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = sl_NetCfgSet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[719]"></a>sl_NetCfgGet</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, netcfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[711]"></a>_SlNonOsSemSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nonos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjUnLock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxIrqHandler
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvGlobalObjUnLock
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDriverHandleError
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppPingStart
</UL>

<P><STRONG><a name="[71b]"></a>_SlNonOsMainLoopTask</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nonos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SlNonOsMainLoopTask
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Task
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;establishConnectionWithAP
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[710]"></a>_SlNonOsSemGet</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, nonos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvCC3100TcpClose
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsMainLoopTask
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjLockWaitForever
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjGlobalLockWaitForever
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitTimeout
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitForever
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppPingStart
</UL>

<P><STRONG><a name="[750]"></a>_SlNonOsSpawn</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, nonos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _SlNonOsSpawn
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxIrqHandler
</UL>

<P><STRONG><a name="[804]"></a>_sl_ParseAddress</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, socket.o(.text), UNUSED)

<P><STRONG><a name="[71d]"></a>sl_Socket</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sl_Socket &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[71e]"></a>sl_Close</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sl_Close &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitCC3100Tcp
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeWifiSendStatus
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiChat
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[71f]"></a>sl_Bind</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_BuildAddress
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[721]"></a>sl_SendTo</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_TruncatePayloadByProtocol
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_BuildAddress
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
</UL>

<P><STRONG><a name="[724]"></a>sl_RecvFrom</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
</UL>

<P><STRONG><a name="[726]"></a>sl_Connect</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = sl_Connect &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_BuildAddress
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitTimeout
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitForever
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectAsyncRespSetting
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[112]"></a>_sl_HandleAsync_Connect</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _sl_HandleAsync_Connect &rArr; _SlDrvProtectionObjLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_driver.o(.constdata)
</UL>
<P><STRONG><a name="[727]"></a>sl_Send</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = sl_Send &rArr; _SlDrvDataWriteOp &rArr; _SlDrvMsgWrite &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_TruncatePayloadByProtocol
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCC3100Data
</UL>

<P><STRONG><a name="[728]"></a>sl_Listen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[729]"></a>sl_Accept</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitTimeout
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitForever
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectAsyncRespSetting
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[773]"></a>sl_Htonl</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sl_Htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[772]"></a>sl_Htons</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sl_Htons
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[111]"></a>_sl_HandleAsync_Accept</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _sl_HandleAsync_Accept &rArr; _SlDrvProtectionObjLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_driver.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>_sl_HandleAsync_Select</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _sl_HandleAsync_Select &rArr; _SlDrvProtectionObjLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_driver.o(.constdata)
</UL>
<P><STRONG><a name="[72a]"></a>sl_Recv</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = sl_Recv &rArr; _SlDrvDataReadOp &rArr; _SlDrvWaitForPoolObj &rArr; _SlDrvSyncObjWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiChat
</UL>

<P><STRONG><a name="[72b]"></a>sl_SetSockOpt</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[72c]"></a>sl_GetSockOpt</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[72d]"></a>sl_Select</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, socket.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitForever
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectAsyncRespSetting
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[805]"></a>SL_FD_SET</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, socket.o(.text), UNUSED)

<P><STRONG><a name="[806]"></a>SL_FD_CLR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, socket.o(.text), UNUSED)

<P><STRONG><a name="[807]"></a>SL_FD_ISSET</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, socket.o(.text), UNUSED)

<P><STRONG><a name="[808]"></a>SL_FD_ZERO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, socket.o(.text), UNUSED)

<P><STRONG><a name="[809]"></a>stopWDT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_board.o(.text), UNUSED)

<P><STRONG><a name="[72e]"></a>CC3100_nHIB_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wifi_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = CC3100_nHIB_init &rArr; RCC_AHB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[730]"></a>CC3100_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CC3100_disable &rArr; GPIO_PinOutClear &rArr; GPIO_ResetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[732]"></a>CC3100_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CC3100_enable &rArr; GPIO_PinOutSet &rArr; GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[734]"></a>CC3100_InterruptEnable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CC3100_InterruptEnable &rArr; EXTILine0_Config &rArr; RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine0_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_Init
</UL>

<P><STRONG><a name="[735]"></a>CC3100_InterruptDisable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CC3100_InterruptDisable &rArr; EXTILine0_Config &rArr; RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine0_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Close
</UL>

<P><STRONG><a name="[2b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wifi_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = EXTI0_IRQHandler &rArr; EXTI_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[739]"></a>registerInterruptHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wifi_board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[71c]"></a>Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Delay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalStrength
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;establishConnectionWithAP
</UL>

<P><STRONG><a name="[736]"></a>sl_Task</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsMainLoopTask
</UL>

<P><STRONG><a name="[737]"></a>sl_Start</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, wifi_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sl_Start &rArr; _SlDrvProtectAsyncRespSetting &rArr; _SlDrvWaitForPoolObj &rArr; _SlDrvSyncObjWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_GetStartResponseConvert
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerInterruptHandler
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_enable
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitTimeout
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectAsyncRespSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_thread
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[73c]"></a>_sl_HandleAsync_InitComplete</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wifi_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _sl_HandleAsync_InitComplete &rArr; _SlDrvReleasePoolObj &rArr; _SlDrvProtectionObjLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_GetStartResponseConvert
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDeviceEventHandler
</UL>

<P><STRONG><a name="[116]"></a>_sl_HandleAsync_Stop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wifi_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _sl_HandleAsync_Stop &rArr; _SlDrvProtectionObjLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDeviceEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_driver.o(.constdata)
</UL>
<P><STRONG><a name="[73d]"></a>sl_Stop</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, wifi_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = sl_Stop &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Close
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerInterruptHandler
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitTimeout
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectAsyncRespSetting
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[740]"></a>sl_EventMaskSet</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wifi_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[741]"></a>sl_EventMaskGet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wifi_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[742]"></a>sl_DevGet</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, wifi_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = sl_DevGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[743]"></a>sl_DevSet</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, wifi_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[117]"></a>_SlDrvDeviceEventHandler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, wifi_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _SlDrvDeviceEventHandler &rArr; _sl_HandleAsync_InitComplete &rArr; _SlDrvReleasePoolObj &rArr; _SlDrvProtectionObjLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvGlobalObjUnLock
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDriverHandleError
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkGeneralEventHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_driver.o(.constdata)
</UL>
<P><STRONG><a name="[70c]"></a>_SlDrvProtectionObjUnLock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvProtectionObjUnLock
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Select
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Accept
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Connect
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectAsyncRespSetting
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
</UL>

<P><STRONG><a name="[70b]"></a>_SlDrvProtectionObjLockWaitForever</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _SlDrvProtectionObjLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Select
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Accept
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Connect
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectAsyncRespSetting
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
</UL>

<P><STRONG><a name="[706]"></a>_SlDrvSyncObjWaitForever</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _SlDrvSyncObjWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Select
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByService
</UL>

<P><STRONG><a name="[70a]"></a>_SlDrvWaitForPoolObj</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = _SlDrvWaitForPoolObj &rArr; _SlDrvSyncObjWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitForever
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectAsyncRespSetting
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppPingStart
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
</UL>

<P><STRONG><a name="[705]"></a>_SlDrvProtectAsyncRespSetting</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _SlDrvProtectAsyncRespSetting &rArr; _SlDrvWaitForPoolObj &rArr; _SlDrvSyncObjWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Select
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByService
</UL>

<P><STRONG><a name="[701]"></a>_SlDrvMemZero</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_driver.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanRxStatGet
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileAdd
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
</UL>

<P><STRONG><a name="[738]"></a>_SlDrvDriverCBInit</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _SlDrvDriverCBInit &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMemZero
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[73f]"></a>_SlDrvDriverCBDeinit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SlDrvDriverCBDeinit
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
</UL>

<P><STRONG><a name="[744]"></a>_SlDrvGlobalObjUnLock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvGlobalObjUnLock
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDeviceEventHandler
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[708]"></a>_SlDrvSyncObjSignal</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvSyncObjSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDriverHandleError
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Select
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Accept
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Connect
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
</UL>

<P><STRONG><a name="[745]"></a>_SlDriverHandleError</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _SlDriverHandleError &rArr; SimpleLinkGeneralEventHandler &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkGeneralEventHandler
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDeviceEventHandler
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitTimeout
</UL>

<P><STRONG><a name="[74e]"></a>_SlDrvMsgReadSpawnCtx</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _SlDrvMsgReadSpawnCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjGlobalLockWaitForever
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvGlobalObjUnLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_driver.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>_SlDrvRxIrqHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _SlDrvRxIrqHandler &rArr; _SlNonOsSpawn
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSpawn
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_device.o(.text)
</UL>
<P><STRONG><a name="[6fc]"></a>_SlDrvCmdOp</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjGlobalLockWaitForever
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvGlobalObjUnLock
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevSet
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevGet
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_EventMaskGet
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_EventMaskSet
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Select
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_GetSockOpt
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SetSockOpt
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Listen
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Bind
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Socket
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgGet
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgSet
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppGet
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppSet
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppPingStart
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByService
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppGetServiceList
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppStop
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppStart
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanGet
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSet
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSetMode
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSmartConfigStart
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanRxStatGet
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanRxFilterGet
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanRxFilterSet
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanRxFilterAdd
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanGetNetworkList
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileDel
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileGet
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileAdd
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicyGet
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicySet
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
</UL>

<P><STRONG><a name="[707]"></a>_SlDrvReleasePoolObj</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _SlDrvReleasePoolObj &rArr; _SlDrvProtectionObjLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlRemoveFromList
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Select
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppPingStart
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByService
</UL>

<P><STRONG><a name="[712]"></a>_SlDrvSyncObjWaitTimeout</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _SlDrvSyncObjWaitTimeout &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDriverHandleError
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Accept
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppPingStart
</UL>

<P><STRONG><a name="[754]"></a>_SlDrvObjUnLock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvObjUnLock
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
</UL>

<P><STRONG><a name="[755]"></a>_SlDrvObjLockWaitForever</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _SlDrvObjLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
</UL>

<P><STRONG><a name="[725]"></a>_SlDrvDataReadOp</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = _SlDrvDataReadOp &rArr; _SlDrvWaitForPoolObj &rArr; _SlDrvSyncObjWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjLockWaitForever
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjUnLock
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjGlobalLockWaitForever
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvGlobalObjUnLock
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitTimeout
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitForever
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Recv
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_RecvFrom
</UL>

<P><STRONG><a name="[723]"></a>_SlDrvDataWriteOp</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _SlDrvDataWriteOp &rArr; _SlDrvMsgWrite &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjLockWaitForever
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjUnLock
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjGlobalLockWaitForever
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvGlobalObjUnLock
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjWaitForever
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SendTo
</UL>

<P><STRONG><a name="[70f]"></a>_SlDrvBasicCmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = _SlDrvBasicCmd &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMemZero
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppPingStart
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSmartConfigStop
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanRxStatStop
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanRxStatStart
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanDisconnect
</UL>

<P><STRONG><a name="[715]"></a>_SlDrvCmdSend</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _SlDrvCmdSend &rArr; _SlDrvMsgWrite &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_NetAppSendTokenValue
</UL>

<P><STRONG><a name="[717]"></a>_SlDrvDispatchHttpServerEvents</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _SlDrvDispatchHttpServerEvents &rArr; SimpleLinkHttpServerCallback &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkHttpServerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>

<P><STRONG><a name="[6ff]"></a>_SlDrvResetCmdExt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_driver.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMemZero
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevSet
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevGet
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_GetSockOpt
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SetSockOpt
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Recv
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_RecvFrom
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SendTo
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgGet
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgSet
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppGet
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppSet
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByService
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppGetServiceList
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanGet
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSet
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanRxFilterGet
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanRxFilterSet
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanGetNetworkList
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicyGet
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicySet
</UL>

<P><STRONG><a name="[73a]"></a>spi_Open</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wifi_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = spi_Open &rArr; wifi_spi_Init &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_spi_Init
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_nHIB_init
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[73e]"></a>spi_Close</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifi_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = spi_Close &rArr; CC3100_InterruptDisable &rArr; EXTILine0_Config &rArr; RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
</UL>

<P><STRONG><a name="[748]"></a>spi_Write</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wifi_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
</UL>

<P><STRONG><a name="[749]"></a>spi_Read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wifi_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = spi_Read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
</UL>

<P><STRONG><a name="[758]"></a>sl_WlanConnect</STRONG> (Thumb, 484 bytes, Stack size 216 bytes, wlan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = sl_WlanConnect &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMemZero
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;establishConnectionWithAP
</UL>

<P><STRONG><a name="[759]"></a>sl_WlanDisconnect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wlan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = sl_WlanDisconnect &rArr; _SlDrvBasicCmd &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[75a]"></a>sl_WlanPolicySet</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, wlan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = sl_WlanPolicySet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalStrength
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[75b]"></a>sl_WlanPolicyGet</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, wlan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[75c]"></a>sl_WlanProfileAdd</STRONG> (Thumb, 520 bytes, Stack size 224 bytes, wlan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMemZero
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[75d]"></a>sl_WlanProfileGet</STRONG> (Thumb, 204 bytes, Stack size 208 bytes, wlan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[75e]"></a>sl_WlanProfileDel</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wlan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sl_WlanProfileDel &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[75f]"></a>sl_WlanGetNetworkList</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, wlan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = sl_WlanGetNetworkList &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalStrength
</UL>

<P><STRONG><a name="[760]"></a>sl_WlanRxFilterAdd</STRONG> (Thumb, 118 bytes, Stack size 120 bytes, wlan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[761]"></a>sl_WlanRxFilterSet</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, wlan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = sl_WlanRxFilterSet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[762]"></a>sl_WlanRxFilterGet</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, wlan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[763]"></a>sl_WlanRxStatStart</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wlan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
</UL>

<P><STRONG><a name="[764]"></a>sl_WlanRxStatStop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wlan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
</UL>

<P><STRONG><a name="[765]"></a>sl_WlanRxStatGet</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wlan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMemZero
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[766]"></a>sl_WlanSmartConfigStop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wlan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
</UL>

<P><STRONG><a name="[767]"></a>sl_WlanSmartConfigStart</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, wlan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[768]"></a>sl_WlanSetMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wlan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = sl_WlanSetMode &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[769]"></a>sl_WlanSet</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, wlan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = sl_WlanSet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[76a]"></a>sl_WlanGet</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, wlan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvResetCmdExt
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[513]"></a>judgeWifiSendStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = judgeWifiSendStatus &rArr; sl_Close &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeSendStatus
</UL>

<P><STRONG><a name="[508]"></a>quitCC3100Tcp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = quitCC3100Tcp &rArr; sl_Close &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quitTcpConnect
</UL>

<P><STRONG><a name="[71a]"></a>recvCC3100TcpClose</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>

<P><STRONG><a name="[51f]"></a>sendCC3100Data</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = sendCC3100Data &rArr; sl_Send &rArr; _SlDrvDataWriteOp &rArr; _SlDrvMsgWrite &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[118]"></a>SimpleLinkWlanEventHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = SimpleLinkWlanEventHandler &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_driver.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>SimpleLinkNetAppEventHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SimpleLinkNetAppEventHandler &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_driver.o(.constdata)
</UL>
<P><STRONG><a name="[756]"></a>SimpleLinkHttpServerCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SimpleLinkHttpServerCallback &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDispatchHttpServerEvents
</UL>

<P><STRONG><a name="[746]"></a>SimpleLinkGeneralEventHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SimpleLinkGeneralEventHandler &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDriverHandleError
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDeviceEventHandler
</UL>

<P><STRONG><a name="[76b]"></a>SimpleLinkSockEventHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cc3100.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>

<P><STRONG><a name="[770]"></a>wifiChat</STRONG> (Thumb, 670 bytes, Stack size 24 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = wifiChat &rArr; sl_Close &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDataFromServer
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Recv
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
</UL>

<P><STRONG><a name="[775]"></a>wifi_recv_thread</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1708<LI>Call Chain = wifi_recv_thread &rArr; BsdTcpClient &rArr; exitEthStatus &rArr; cleanCbox &rArr; removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSignalStrength
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BsdTcpClient
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;establishConnectionWithAP
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeAppVariables
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc3100.o(.text)
</UL>
<P><STRONG><a name="[51c]"></a>wifiStyleStart</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = wifiStyleStart &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultConfig
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethWifiStyleStart
</UL>

<P><STRONG><a name="[776]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disksize
</UL>

<P><STRONG><a name="[778]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[80a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[471]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[80b]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[626]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctime &rArr; asctime
</UL>
<BR>[Calls]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
</UL>

<P><STRONG><a name="[80c]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDicnary1
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_rx
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_tx
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnNetconfig
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assessCboxState
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addCbox
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeCbox
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listReport
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeAboxFreq
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_serverNet_info
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdSend
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_NetAppSendTokenValue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSmartConfigStart
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanRxFilterAdd
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileGet
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileAdd
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
</UL>

<P><STRONG><a name="[80d]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[80e]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[80f]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[77b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[810]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[811]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMemZero
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_txt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_each_txt
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSerNetConfigFile
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeCbox
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdma_rev_pack
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_delete
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[812]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[77c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5ec]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[5bd]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_get_token
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
</UL>

<P><STRONG><a name="[20e]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_log_file
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_string
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_mdn
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[1bb]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
</UL>

<P><STRONG><a name="[4fc]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[1b6]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdall
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
</UL>

<P><STRONG><a name="[502]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_delete
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>

<P><STRONG><a name="[1c8]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[3c3]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_bg
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eth_recv
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
</UL>

<P><STRONG><a name="[591]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_id
</UL>

<P><STRONG><a name="[202]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[201]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[813]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[814]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[791]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[777]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[815]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[779]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[77a]"></a>asctime</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[77e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[816]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[782]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[77f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[783]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[785]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[786]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[787]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[788]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[817]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[784]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[818]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[780]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[781]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[78a]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[819]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[81a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[78b]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[81b]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1b7]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdall
</UL>

<P><STRONG><a name="[81c]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[81d]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[77d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[81e]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[81f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[820]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[821]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[18c]"></a>DMA_Configuration</STRONG> (Thumb, 244 bytes, Stack size 96 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = DMA_Configuration &rArr; DMA_DeInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[0]"></a>configure</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = configure &rArr; SPI_I2S_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>xfer</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = xfer &rArr; DMA_Configuration &rArr; DMA_DeInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[1c4]"></a>copyfile</STRONG> (Thumb, 466 bytes, Stack size 56 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[1c6]"></a>copydir</STRONG> (Thumb, 258 bytes, Stack size 344 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[1c7]"></a>_get_path_lastname</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, filefun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[78]"></a>take_log_event</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = take_log_event &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abox_log.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>record_log</STRONG> (Thumb, 382 bytes, Stack size 264 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = record_log &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAppVertion
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnNetconfig
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_arp_table
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_to_server
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abox_log.o(.text)
</UL>
<P><STRONG><a name="[20d]"></a>add_string</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = add_string &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_arp_table
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_txt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_each_txt
</UL>

<P><STRONG><a name="[20f]"></a>get_each_txt</STRONG> (Thumb, 1994 bytes, Stack size 72 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = get_each_txt &rArr; itoa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_string
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_to_server
</UL>

<P><STRONG><a name="[212]"></a>get_log_txt</STRONG> (Thumb, 754 bytes, Stack size 64 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = get_log_txt &rArr; itoa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_string
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_to_server
</UL>

<P><STRONG><a name="[7a]"></a>debug_log</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = debug_log &rArr; analysis_reason &rArr; check_arp_table &rArr; ping &rArr; ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_reason
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abox_log.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>send_log_to_server</STRONG> (Thumb, 624 bytes, Stack size 32 bytes, abox_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1620<LI>Call Chain = send_log_to_server &rArr; send_log_data &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_log_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_txt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_each_txt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abox_log.o(.text)
</UL>
<P><STRONG><a name="[22d]"></a>BPS_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = BPS_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[239]"></a>get_week</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_week
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[7c]"></a>rt_rtc_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4_rtc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4_rtc.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>rt_rtc_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4_rtc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4_rtc.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>rt_rtc_control</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, stm32f4_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_rtc_control &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_week
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4_rtc.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>rt_stm32_eth_init</STRONG> (Thumb, 178 bytes, Stack size 200 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_stm32_eth_init &rArr; ETH_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAITConfig
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_monitor_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>rt_stm32_eth_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>rt_stm32_eth_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_eth.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>rt_stm32_eth_read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_stm32_eth_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>rt_stm32_eth_write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_stm32_eth_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>rt_stm32_eth_control</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_stm32_eth_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth.o(.text)
</UL>
<P><STRONG><a name="[298]"></a>NVIC_Configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
</UL>

<P><STRONG><a name="[29a]"></a>GPIO_Configuration</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_eth_init
</UL>

<P><STRONG><a name="[85]"></a>phy_monitor_thread_entry</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, stm32f4xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = phy_monitor_thread_entry &rArr; rt_stm32_eth_init &rArr; ETH_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stm32_eth_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>stm32_configure</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = stm32_configure &rArr; USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>stm32_control</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = stm32_control &rArr; USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>stm32_putc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = stm32_putc &rArr; GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>stm32_getc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[2a2]"></a>uart_isr</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = uart_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2a7]"></a>RCC_Configuration</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = RCC_Configuration &rArr; RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[2a8]"></a>GPIO_Configuration</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[2a9]"></a>NVIC_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[2ab]"></a>SetSysClock</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[30f]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[30e]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[11a]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[11b]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[11e]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[126]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[88]"></a>rt_thread_idle_entry</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text)
</UL>
<P><STRONG><a name="[366]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[369]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[36c]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
</UL>

<P><STRONG><a name="[36b]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[36e]"></a>rt_list_isempty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[376]"></a>rt_ipc_list_resume</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[397]"></a>print_number</STRONG> (Thumb, 292 bytes, Stack size 52 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[396]"></a>skip_atoi</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[39f]"></a>plug_holes</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[3a2]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[3a3]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[3a5]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[89]"></a>rt_thread_exit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[3b0]"></a>_rt_thread_init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[3ad]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[3af]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[3ba]"></a>_rt_timer_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[3b8]"></a>rt_timer_list_next_timeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_timer_list_next_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_next_timeout_tick
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[8a]"></a>rt_thread_timer_entry</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_thread_timer_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[3bd]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[3b9]"></a>rt_list_isempty</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[3bb]"></a>_rt_timer_remove</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[8d]"></a>_rym_bg</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _rym_bg &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_ch
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tofile.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>_rym_tof</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _rym_tof &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteToFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tofile.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>_rym_end</STRONG> (Thumb, 156 bytes, Stack size 256 bytes, tofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332<LI>Call Chain = _rym_end &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteToFlash
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSerNetConfigFile
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSaveDataSector
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFlashFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tofile.o(.text)
</UL>
<P><STRONG><a name="[3d2]"></a>CcittCrc16</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CcittCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_fin
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_trans_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_handshake
</UL>

<P><STRONG><a name="[8e]"></a>_rym_rx_ind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _rym_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ymodem.o(.text)
</UL>
<P><STRONG><a name="[3ce]"></a>_rym_read_code</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = _rym_read_code &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_fin
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_trans
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_handshake
</UL>

<P><STRONG><a name="[3cf]"></a>_rym_read_data</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _rym_read_data &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_fin
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_trans_data
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_handshake
</UL>

<P><STRONG><a name="[3d0]"></a>_rym_putchar</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _rym_putchar &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_fin
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_trans
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_handshake
</UL>

<P><STRONG><a name="[3d1]"></a>_rym_do_handshake</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _rym_do_handshake &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CcittCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_recv
</UL>

<P><STRONG><a name="[3d3]"></a>_rym_trans_data</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _rym_trans_data &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CcittCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_trans
</UL>

<P><STRONG><a name="[3d4]"></a>_rym_do_trans</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _rym_do_trans &rArr; _rym_trans_data &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_trans_data
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_recv
</UL>

<P><STRONG><a name="[3d5]"></a>_rym_do_fin</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _rym_do_fin &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_putchar
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_data
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_read_code
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CcittCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_recv
</UL>

<P><STRONG><a name="[3d6]"></a>_rym_do_recv</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ymodem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _rym_do_recv &rArr; _rym_do_trans &rArr; _rym_trans_data &rArr; _rym_read_data &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_fin
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_trans
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rym_do_handshake
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rym_recv_on_device
</UL>

<P><STRONG><a name="[3e9]"></a>netconn_recv_data</STRONG> (Thumb, 906 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
</UL>

<P><STRONG><a name="[3f1]"></a>netconn_close_shutdown</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
</UL>

<P><STRONG><a name="[9f]"></a>recv_raw</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>recv_udp</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>recv_tcp</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>err_tcp</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[3fe]"></a>do_writemore</STRONG> (Thumb, 918 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[9b]"></a>sent_tcp</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = sent_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[401]"></a>do_close_internal</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[9c]"></a>poll_tcp</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = poll_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[40a]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[a2]"></a>accept_function</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[40e]"></a>pcb_new</STRONG> (Thumb, 526 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[414]"></a>netconn_drain</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[a1]"></a>do_connected</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = do_connected &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>do_dns_found</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = do_dns_found &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[43c]"></a>get_socket</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_socket &rArr; _rt_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
</UL>

<P><STRONG><a name="[44e]"></a>tryget_socket</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>

<P><STRONG><a name="[43d]"></a>alloc_socket</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = alloc_socket &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[43e]"></a>free_socket</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[a4]"></a>event_callback</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = event_callback &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[44d]"></a>lwip_selscan</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = lwip_selscan &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[451]"></a>lwip_getaddrname</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>

<P><STRONG><a name="[a5]"></a>lwip_getsockopt_internal</STRONG> (Thumb, 622 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = lwip_getsockopt_internal &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>lwip_setsockopt_internal</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = lwip_setsockopt_internal &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>tcpip_thread</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>pbuf_free_int</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = pbuf_free_int &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[46b]"></a>dhcp_delete_msg</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[46c]"></a>dhcp_option_trailer</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = dhcp_option_trailer &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[46d]"></a>dhcp_option_byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dhcp_option_byte &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[46e]"></a>dhcp_option</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dhcp_option &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[46f]"></a>dhcp_option_short</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dhcp_option_short &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[470]"></a>dhcp_create_msg</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[473]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[472]"></a>dhcp_discover</STRONG> (Thumb, 766 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[476]"></a>dhcp_handle_nak</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[47b]"></a>dhcp_check</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[47d]"></a>dhcp_option_long</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dhcp_option_long &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[47e]"></a>dhcp_select</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[47f]"></a>dhcp_handle_offer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[481]"></a>dhcp_t1_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[482]"></a>dhcp_rebind</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[483]"></a>dhcp_t2_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[485]"></a>dhcp_reboot</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[487]"></a>dhcp_bind</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[489]"></a>dhcp_timeout</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[48b]"></a>dhcp_handle_ack</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[490]"></a>dhcp_parse_reply</STRONG> (Thumb, 1074 bytes, Stack size 56 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[aa]"></a>dhcp_recv</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(.text)
</UL>
<P><STRONG><a name="[494]"></a>dhcp_decline</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[497]"></a>dns_parse_name</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[496]"></a>dns_compare_name</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dns_compare_name
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[ab]"></a>dns_recv</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = dns_recv &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_parse_name
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(.text)
</UL>
<P><STRONG><a name="[49a]"></a>dns_send</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[49b]"></a>dns_check_entry</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[49c]"></a>dns_check_entries</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[49e]"></a>dns_lookup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dns_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[49f]"></a>dns_enqueue</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[4aa]"></a>pbuf_free_ooseq</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[ac]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = pbuf_free_ooseq_callback &rArr; pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(.text)
</UL>
<P><STRONG><a name="[4ac]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[4c1]"></a>tcp_close_shutdown</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[4ca]"></a>tcp_new_port</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[ad]"></a>tcp_accept_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[4cf]"></a>tcp_kill_prio</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[4d0]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[4d2]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = tcp_oos_insert_segment &rArr; pbuf_realloc &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4d3]"></a>tcp_receive</STRONG> (Thumb, 2674 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[4d7]"></a>tcp_parseopt</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[4d8]"></a>tcp_process</STRONG> (Thumb, 1206 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4da]"></a>tcp_listen_input</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4db]"></a>tcp_timewait_input</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4de]"></a>tcp_output_alloc_header</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[4df]"></a>tcp_create_segment</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[4e0]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[4e1]"></a>tcp_write_checks</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = tcp_write_checks &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[4e3]"></a>tcp_output_segment</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; pbuf_header &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[ae]"></a>tcpip_tcp_timer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>arp_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>dhcp_timer_coarse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>dhcp_timer_fine</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>dns_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = dns_timer &rArr; dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[4e7]"></a>udp_new_port</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[4ea]"></a>icmp_send_response</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[4ed]"></a>lwip_standard_chksum</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[4f3]"></a>free_etharp_q</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>

<P><STRONG><a name="[4f4]"></a>etharp_free_entry</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[4f5]"></a>etharp_find_entry</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[4f6]"></a>etharp_send_ip</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = etharp_send_ip &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[4f7]"></a>etharp_update_arp_entry</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[4f9]"></a>etharp_arp_input</STRONG> (Thumb, 812 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_IP_conflict_result
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[4fa]"></a>etharp_raw</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[4fb]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[b4]"></a>ethernetif_linkoutput</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ethernetif_linkoutput &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>eth_netif_device_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = eth_netif_device_init &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>eth_tx_thread_entry</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = eth_tx_thread_entry &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>eth_rx_thread_entry</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = eth_rx_thread_entry &rArr; netifapi_netif_common &rArr; tcpip_netifapi &rArr; sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[522]"></a>initializeClient</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, client.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = initializeClient &rArr; rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_send_init
</UL>

<P><STRONG><a name="[bb]"></a>netif_device_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = netif_device_init &rArr; rt_device_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>tcpip_init_done_callback</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = tcpip_init_done_callback &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(.text)
</UL>
<P><STRONG><a name="[534]"></a>ping_prepare_echo</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ping_prepare_echo &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>

<P><STRONG><a name="[535]"></a>ping_send</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = ping_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[536]"></a>ping_recv</STRONG> (Thumb, 128 bytes, Stack size 120 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[53a]"></a>rt_spi_send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si4463.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_spi_send &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdn_reset
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[55b]"></a>getServerNetAdrr</STRONG> (Thumb, 72 bytes, Stack size 240 bytes, exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1316<LI>Call Chain = getServerNetAdrr &rArr; readServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readServerInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeServerInfo
</UL>

<P><STRONG><a name="[568]"></a>ser_reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = ser_reg &rArr; sub_PackRegCmd &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_PackRegCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_timeout
</UL>

<P><STRONG><a name="[bd]"></a>heart_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, abox_exchange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = heart_timeout &rArr; ser_reg &rArr; sub_PackRegCmd &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_heart
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abox_exchange.o(.text)
</UL>
<P><STRONG><a name="[56d]"></a>checkAboxEnvironment</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = checkAboxEnvironment &rArr; changeSubgFillter &rArr; SI4463_init &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeSubgFillter
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvFreqData
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRssi
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseAboxSubgFreq
</UL>

<P><STRONG><a name="[56e]"></a>delayRandom</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = delayRandom &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxThreadInformation
</UL>

<P><STRONG><a name="[570]"></a>setFreqDefault</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = setFreqDefault &rArr; saveFreqInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveFreqInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAboxInformation
</UL>

<P><STRONG><a name="[571]"></a>initAboxInformation</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = initAboxInformation &rArr; setFreqDefault &rArr; saveFreqInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDataPool
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFreqInfo
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFreqDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sub_Abox_init_thread_entry
</UL>

<P><STRONG><a name="[574]"></a>initAboxThreadInformation</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = initAboxThreadInformation &rArr; initServerInfo &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDictionary
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeLed
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayRandom
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initServerInfo
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSubgHardware
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sub_Abox_init_thread_entry
</UL>

<P><STRONG><a name="[575]"></a>getPoolDate</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = getPoolDate &rArr; ReadPool &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPool
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCbox
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeCbox
</UL>

<P><STRONG><a name="[576]"></a>processExistingData</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = processExistingData &rArr; ReadPool &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPool
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeCbox
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
</UL>

<P><STRONG><a name="[579]"></a>chooseAboxSubgFreq</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = chooseAboxSubgFreq &rArr; saveFreqInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFreqPack
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAboxEnvironment
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveFreqInfo
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFreqInfo
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeSubgFillter
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sub_Abox_init_thread_entry
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determineAboxState
</UL>

<P><STRONG><a name="[57a]"></a>sendTestPack1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sendTestPack1 &rArr; tx_data &rArr; SI4463_init &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testPackFunc
</UL>

<P><STRONG><a name="[57b]"></a>sendTestPack3</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sendTestPack3 &rArr; tx_data &rArr; SI4463_init &rArr; spi_write &rArr; check_cts &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testPackFunc
</UL>

<P><STRONG><a name="[57f]"></a>writeDataInfo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = writeDataInfo &rArr; WritePool &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePool
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendCheckPack
</UL>

<P><STRONG><a name="[581]"></a>sendCheckPack</STRONG> (Thumb, 770 bytes, Stack size 1264 bytes, sub_g_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1828<LI>Call Chain = sendCheckPack &rArr; checkDataFromSubg &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_left
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insetCboxHeadData
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txDataResult
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDataInfo
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processExistingData
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkDataFromSubg
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_data
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCbox
</UL>

<P><STRONG><a name="[be]"></a>power_thread_entry</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = power_thread_entry &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reboot
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.text)
</UL>
<P><STRONG><a name="[592]"></a>_list_thread</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[593]"></a>show_wait_queue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[594]"></a>_list_sem</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[597]"></a>_list_event</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[598]"></a>_list_mutex</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
</UL>

<P><STRONG><a name="[599]"></a>_list_mailbox</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[59a]"></a>_list_msgqueue</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
</UL>

<P><STRONG><a name="[59b]"></a>_list_timer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[59c]"></a>_list_device</STRONG> (Thumb, 76 bytes, Stack size 104 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _list_device &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[59e]"></a>str_is_prefix</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[59f]"></a>str_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[595]"></a>rt_list_isempty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[596]"></a>rt_list_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[5a0]"></a>finsh_compile</STRONG> (Thumb, 2632 bytes, Stack size 40 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = finsh_compile &rArr;  finsh_compile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>

<P><STRONG><a name="[5a2]"></a>finsh_type_check</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = finsh_type_check &rArr;  finsh_type_check (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
</UL>

<P><STRONG><a name="[5a8]"></a>finsh_block_insert</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[5a7]"></a>finsh_block_remove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[5ac]"></a>finsh_block_split</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[5a9]"></a>finsh_block_merge</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_block_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[5aa]"></a>finsh_heap_gc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[5bf]"></a>make_sys_node</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = make_sys_node
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[5c0]"></a>proc_param_list</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = proc_param_list &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[5c3]"></a>proc_expr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = proc_expr &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[5c4]"></a>proc_identifier</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = proc_identifier &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[5c5]"></a>proc_primary_expr</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = proc_primary_expr &rArr;  proc_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[5c6]"></a>proc_postfix_expr</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = proc_postfix_expr &rArr; proc_primary_expr &rArr;  proc_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
</UL>

<P><STRONG><a name="[5c7]"></a>proc_unary_expr</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + In Cycle
<LI>Call Chain = proc_unary_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[5c9]"></a>proc_type</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = proc_type &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[5c8]"></a>proc_cast_expr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + In Cycle
<LI>Call Chain = proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
</UL>

<P><STRONG><a name="[5ca]"></a>proc_multiplicative_expr</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
</UL>

<P><STRONG><a name="[5cb]"></a>proc_additive_expr</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
</UL>

<P><STRONG><a name="[5cc]"></a>proc_shift_expr</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
</UL>

<P><STRONG><a name="[5cd]"></a>proc_and_expr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
</UL>

<P><STRONG><a name="[5ce]"></a>proc_exclusive_or_expr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
</UL>

<P><STRONG><a name="[5cf]"></a>proc_inclusive_or_expr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = proc_inclusive_or_expr &rArr; proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>

<P><STRONG><a name="[5c1]"></a>proc_assign_expr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + In Cycle
<LI>Call Chain = proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
</UL>

<P><STRONG><a name="[5d0]"></a>proc_variable_decl</STRONG> (Thumb, 462 bytes, Stack size 56 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[5d2]"></a>proc_expr_statement</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = proc_expr_statement &rArr; proc_expr &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[5d8]"></a>token_prev_char</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, finsh_token.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[5d5]"></a>token_next_char</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[5d7]"></a>token_spec_number</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_spec_number
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[5d6]"></a>token_proc_number</STRONG> (Thumb, 274 bytes, Stack size 160 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_spec_number
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[5d9]"></a>token_proc_escape</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = token_proc_escape &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
</UL>

<P><STRONG><a name="[5da]"></a>token_proc_string</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = token_proc_string &rArr; token_proc_escape &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[5db]"></a>token_proc_char</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = token_proc_char &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[5dc]"></a>token_match_name</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_match_name &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[5de]"></a>token_trim_space</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = token_trim_space &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[5df]"></a>token_run</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
</UL>

<P><STRONG><a name="[15e]"></a>msh_enter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, msh.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[5e6]"></a>msh_split</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msh_split
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[5e4]"></a>msh_get_cmd</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[5e5]"></a>_msh_exec_cmd</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _msh_exec_cmd &rArr; msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[5e9]"></a>str_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[bf]"></a>finsh_rx_ind</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[5ee]"></a>shell_auto_complete</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[5f4]"></a>shell_handle_history</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[5f5]"></a>shell_push_history</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_push_history &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[5fa]"></a>send_to_client</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = send_to_client &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_write
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_option_to_client
</UL>

<P><STRONG><a name="[5fc]"></a>send_option_to_client</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = send_option_to_client &rArr; send_to_client &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_client
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rx
</UL>

<P><STRONG><a name="[5fe]"></a>process_rx</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = process_rx &rArr; send_option_to_client &rArr; send_to_client &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_option_to_client
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
</UL>

<P><STRONG><a name="[600]"></a>client_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = client_close &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_echo
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_thread
</UL>

<P><STRONG><a name="[c0]"></a>telnet_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, telnet.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>telnet_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, telnet.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>telnet_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, telnet.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>telnet_read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = telnet_read &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>telnet_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = telnet_write &rArr; send_to_client &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_client
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>telnet_control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, telnet.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>telnet_thread</STRONG> (Thumb, 292 bytes, Stack size 96 bytes, telnet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = telnet_thread &rArr; process_rx &rArr; send_option_to_client &rArr; send_to_client &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_close
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rx
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_client
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_echo
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_echo
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>i2c_bus_device_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2c_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = i2c_bus_device_read &rArr; rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>i2c_bus_device_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2c_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = i2c_bus_device_write &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>i2c_bus_device_control</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, i2c_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = i2c_bus_device_control &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>_pin_read</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>_pin_write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>_pin_control</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _pin_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>_spi_bus_device_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>_spi_bus_device_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>_spi_bus_device_control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>_spidev_device_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _spidev_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>_spidev_device_write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _spidev_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>_spidev_device_control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>rt_serial_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_serial_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>rt_serial_open</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>rt_serial_close</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>rt_serial_read</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_serial_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>rt_serial_write</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_serial_write &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>rt_serial_control</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_serial_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[635]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[636]"></a>rt_list_isempty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[638]"></a>rt_ringbuffer_data_len</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
</UL>

<P><STRONG><a name="[639]"></a>rt_ringbuffer_status</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ringbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[65e]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[65d]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[64c]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[64e]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 984 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[651]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1066 bytes, Stack size 40 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[652]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[654]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[656]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[657]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[65c]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[662]"></a>USBH_GetFreeChannel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_hcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>

<P><STRONG><a name="[664]"></a>USBH_SubmitSetupRequest</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_ioreq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[2]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbh_msc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbh_msc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_msc_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[677]"></a>USBH_MSC_GETMaxLUN</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_msc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_GETMaxLUN &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[678]"></a>USBH_MSC_BOTReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_msc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_BOTReset &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[5]"></a>USBH_MSC_Handle</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, usbh_msc_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBH_MSC_Handle &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ErrorHandle
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOTReset
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[68c]"></a>USBH_HandleEnum</STRONG> (Thumb, 452 bytes, Stack size 96 bytes, usbh_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = USBH_HandleEnum &rArr; HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[69d]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
</UL>

<P><STRONG><a name="[696]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[6a4]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[6a8]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_stdreq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[6a7]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_stdreq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[6a5]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[6a9]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_stdreq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[6d2]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[6c5]"></a>mem_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[6d5]"></a>mem_cmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[6de]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
</UL>

<P><STRONG><a name="[6c2]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[6c3]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6c4]"></a>sync_fs</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[6c9]"></a>remove_chain</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6ca]"></a>create_chain</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[6e8]"></a>clmt_clust</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[6cd]"></a>dir_next</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[6ce]"></a>dir_alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
</UL>

<P><STRONG><a name="[6e0]"></a>ld_clust</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6e7]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6cf]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[6d7]"></a>pick_lfn</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[6d9]"></a>fit_lfn</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[6d1]"></a>gen_numname</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[6d4]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[6d3]"></a>dir_find</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[6d6]"></a>dir_read</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
</UL>

<P><STRONG><a name="[6d8]"></a>dir_register</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6da]"></a>dir_remove</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[6db]"></a>get_fileinfo</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[6dd]"></a>create_name</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[6df]"></a>follow_path</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[6e3]"></a>get_ldnumber</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[6e1]"></a>check_fs</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[6e2]"></a>find_volume</STRONG> (Thumb, 798 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_UDISK_Write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[6e5]"></a>validate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[6f7]"></a>putc_bfd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[70d]"></a>CopyPingResultsToReport</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, netapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppPingStart
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
</UL>

<P><STRONG><a name="[720]"></a>_sl_BuildAddress</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, socket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SendTo
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Bind
</UL>

<P><STRONG><a name="[722]"></a>_sl_TruncatePayloadByProtocol</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, socket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_SendTo
</UL>

<P><STRONG><a name="[72f]"></a>GPIO_PinOutClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = GPIO_PinOutClear &rArr; GPIO_ResetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
</UL>

<P><STRONG><a name="[731]"></a>GPIO_PinOutSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wifi_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = GPIO_PinOutSet &rArr; GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_enable
</UL>

<P><STRONG><a name="[733]"></a>EXTILine0_Config</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, wifi_board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = EXTILine0_Config &rArr; RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptDisable
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptEnable
</UL>

<P><STRONG><a name="[73b]"></a>_sl_GetStartResponseConvert</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wifi_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[74f]"></a>_SlAsyncEventGenericHandler</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _SlAsyncEventGenericHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
</UL>

<P><STRONG><a name="[74c]"></a>_SlFindAndSetActiveObj</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _SlFindAndSetActiveObj
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[74b]"></a>_SlDrvClassifyRxMsg</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, wifi_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[747]"></a>_SlDrvRxHdrRead</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[74a]"></a>_SlDrvMsgRead</STRONG> (Thumb, 886 bytes, Stack size 56 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvClassifyRxMsg
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlFindAndSetActiveObj
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvGlobalObjUnLock
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDriverHandleError
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvSyncObjSignal
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjUnLock
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvProtectionObjLockWaitForever
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMemZero
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
</UL>

<P><STRONG><a name="[74d]"></a>_SlDrvObjGlobalLockWaitForever</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _SlDrvObjGlobalLockWaitForever &rArr; _SlNonOsSemGet &rArr; recvCC3100TcpClose &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[751]"></a>_SlDrvMsgReadCmdCtx</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvGlobalObjUnLock
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDriverHandleError
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSpawn
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[752]"></a>_SlDrvMsgWrite</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _SlDrvMsgWrite &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdSend
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[753]"></a>_SlRemoveFromList</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wifi_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlRemoveFromList
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
</UL>

<P><STRONG><a name="[757]"></a>wifi_spi_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wifi_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = wifi_spi_Init &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[76c]"></a>displayBanner</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = displayBanner &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeAppVariables
</UL>

<P><STRONG><a name="[76d]"></a>initializeAppVariables</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = initializeAppVariables &rArr; displayBanner &rArr; at_printf &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayBanner
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_thread
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[76e]"></a>configureSimpleLinkToDefaultState</STRONG> (Thumb, 302 bytes, Stack size 96 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = configureSimpleLinkToDefaultState &rArr; sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevGet
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsMainLoopTask
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgSet
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSUnRegisterService
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeAppVariables
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSet
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSetMode
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanRxFilterSet
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileDel
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicySet
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanDisconnect
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_thread
</UL>

<P><STRONG><a name="[76f]"></a>establishConnectionWithAP</STRONG> (Thumb, 114 bytes, Stack size 256 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332<LI>Call Chain = establishConnectionWithAP &rArr; controlServerInfo &rArr; setSerInfo &rArr; setSecret_1 &rArr; writeByteToFlash &rArr; FLASH_ProgramByte &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;controlServerInfo
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsMainLoopTask
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_thread
</UL>

<P><STRONG><a name="[771]"></a>BsdTcpClient</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1708<LI>Call Chain = BsdTcpClient &rArr; exitEthStatus &rArr; cleanCbox &rArr; removeCbox &rArr; ser_heart &rArr; pack_ser_heart &rArr; sendDataToServer &rArr;  quitTcpConnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLed
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_printf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeServerInfo
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitEthStatus
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entryEthStatus
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;returnConfigLinkMothod
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htons
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htonl
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Socket
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiChat
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_thread
</UL>

<P><STRONG><a name="[774]"></a>getSignalStrength</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, cc3100.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = getSignalStrength &rArr; sl_WlanGetNetworkList &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanGetNetworkList
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicySet
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_recv_thread
</UL>

<P><STRONG><a name="[78d]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[78c]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[790]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[78f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[dc]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
