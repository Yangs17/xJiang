#include "sub_G.h"
#include "si4463.h"
#include "abox.h"


abox_information aboxInfo;








/**
 * This function will select the appropriate frequency in the current environment for Abox.
 *
 * @param void
 *
 * @return RT_EOK   :The current environment is free from interference.
 *         RT_ERROR :There is interference in the current environment.
 *
 */
static err_t checkAboxEnvironment(void)
{
	aboxInfo.filterInfo.filterMark = SUBG_FILTER_CLOSE;
	rt_memset(aboxInfo.filterInfo.filterBuf,0,FILETER_LENGTH);
	changeSubgFillter(&aboxInfo.filterInfo);

	/* If data is received, frequency modulation is required.  */
	if(RT_EOK ==  recvFreqData())
	{
		return RT_ERROR;
	}
		
	/* Determine if the signal is normal. */
    if(getRssi() >  RSSI_WARNING)
	{
		return RT_ERROR;
	}

	return RT_EOK;
}




/* 延时随机时间 */
static void delayRandom()
{
	rt_thread_delay((Sys_Setup.app.id + rt_tick_get()) % 100);
}

void sendFreqPack()
{
    rt_uint8_t pack[100];
	rt_uint16_t len = 0;
	rt_memset(pack,0,100);

    stPackCmd *stpack =(stPackCmd *)pack;
	
	stpack->soh = CSOH;   
	stpack->id  = Sys_Setup.app.id;	
	stpack->cmd = TCMD_110;
	stpack->len = 4+2*aboxInfo.freqInfo.freqSaveNum;
	len = sizeof(stPackCmd);
	
	rt_memcpy(pack+len,(rt_uint16_t *)(&Cdma_Info.freq_num),2);
	len += 2;

	rt_memcpy(pack+len,&aboxInfo.freqInfo.freqSaveNum,2);
	len += 2;

	rt_memcpy(pack+len,aboxInfo.freqInfo.freqCollect,2*aboxInfo.freqInfo.freqSaveNum);
	len += 2*aboxInfo.freqInfo.freqSaveNum;

	rt_uint16_t crc = ModbusCrc16(pack,len);
	rt_memcpy(pack+len,&crc,2);
	len += 2;

	sendDataToServer(SEND_DATA,pack,len);

}

static void setFreqDefault(freq_information *freqInfo)
{
	freqInfo->preFreq     = 0;
	freqInfo->freqSaveNum = 10;
	
	freqInfo->freqCollect[0]  = 4;
	freqInfo->freqCollect[1]  = 5;
	freqInfo->freqCollect[2]  = 6;
	freqInfo->freqCollect[3]  = 7;
	freqInfo->freqCollect[4]  = 8;

	freqInfo->freqCollect[5]  = 22;
	freqInfo->freqCollect[6]  = 23;
	freqInfo->freqCollect[7]  = 24;
	freqInfo->freqCollect[8]  = 25;
	freqInfo->freqCollect[9]  = 26;

	saveFreqInfo(freqInfo);
}


/* 初始化Abox信息 */
static void initAboxInformation()
{
	aboxInfo.packageInfo.packageSendNum  = 0;
	aboxInfo.packageInfo.packageWrongNum = 0;
	aboxInfo.cboxTotalInfo.cboxOnlineNum = 0;

	aboxInfo.cboxDataPool = InitDataPool(CBOXDATAPOOLSIZE,"cboxPoll");
	aboxInfo.subgDataPool = InitDataPool(SUBGDATAPOOLSIZE,"cboxPoll");
	
	if(!aboxInfo.cboxDataPool
		|| !aboxInfo.subgDataPool)
	{
		rt_kprintf(" malloc data pool is err!\r\n ");
	}
		
	aboxInfo.aboxEvent = rt_event_create("AboxEvent",RT_IPC_FLAG_FIFO);
	if(!aboxInfo.aboxEvent)
	{
		rt_kprintf("Abox event is error!\r\n");
	}

	if(RT_ERROR == initFreqInfo(&aboxInfo.freqInfo))
		setFreqDefault(&aboxInfo.freqInfo);
	
}


void closeLed()
{
	OutputLed(LEDOFF,LED_ROOF);
	OutputLed(LEDOFF,LED_MON);
	OutputLed(LEDOFF,LED_CAN);
	OutputLed(LEDOFF,LED_BOX);
}



/* 初始化线程信息 */
static void initAboxThreadInformation()
{
	closeLed();
	
	/* exchange init */
    Cdma_Info.AT_status = AT_FREE;
	Cdma_Info.dev_id = (ABOX_DEV_TYPE << 24) | Sys_Setup.app.id;
	exchange_Abox_init();

	/* server information check */
	initServerInfo();

	/* ethernet init */
	Cdma_Info.link = DISCONNENCT;
	rt_event_send(cliEvent, TCP_CLI_ABOX);

	/* sub-g init ---handle the Cbox function */
	initSubgHardware();// set the filter_buf to 0.


	/* dictionnary */
	initDictionary();
	delayRandom();




}






/**
 * This function will clean Cbox information.
 *
 * @param void
 *
 * @return void
 *
 */
void cleanCbox()
{
	aboxInfo.packageInfo.packageSendNum = 0;
	aboxInfo.packageInfo.packageWrongNum = 0;

	rt_uint8_t i = 0;
	for(i = 0; i < aboxInfo.cboxTotalInfo.cboxOnlineNum; i++)
	removeCbox(i);
	aboxInfo.cboxTotalInfo.cboxOnlineNum = 0;

	cleanPool(aboxInfo.cboxDataPool);
	cleanPool(aboxInfo.subgDataPool);

	/* let Cbox disconnect */
	rt_thread_delay(POLL_TIME_OUT+1000);

}



/********************************TEST_PACK**********************************/

/* 选择subg频段 */
static void chooseAboxSubgFreq(rt_uint8_t freq_num)
{
	if(freq_num < aboxInfo.freqInfo.freqSaveNum)
	{
		aboxInfo.freqInfo.preFreq = freq_num;	
		Cdma_Info.freq_num = aboxInfo.freqInfo.freqCollect[aboxInfo.freqInfo.preFreq];	

		rt_memset(&aboxInfo.filterInfo,0,sizeof(aboxInfo.filterInfo));	
		
		while(RT_ERROR == checkAboxEnvironment())  
		{	
			aboxInfo.freqInfo.preFreq++;
			
			if(aboxInfo.freqInfo.preFreq >= aboxInfo.freqInfo.freqSaveNum)
			{
				aboxInfo.freqInfo.preFreq = 0;
			}
			Cdma_Info.freq_num = aboxInfo.freqInfo.freqCollect[aboxInfo.freqInfo.preFreq];	
		}

		if(RT_ERROR == checkFreqInfo(&aboxInfo.freqInfo))
			saveFreqInfo(&aboxInfo.freqInfo);

		dicInfo.fifthDicInfo.freq_num = Cdma_Info.freq_num;
		at_printf("aboxInfo.freqInfo.preFreq = %d\r\n",Cdma_Info.freq_num);   

		/* boot subg */
		rt_memcpy(aboxInfo.filterInfo.filterBuf,&Cdma_Info.dev_id,sizeof(FILETER_LENGTH));
		aboxInfo.filterInfo.filterMark = SUBG_FILTER_OPEN;
		changeSubgFillter(&aboxInfo.filterInfo);
	}

	sendFreqPack();
}


/* 测试包发送 */
static void sendTestPack1()
{
	test_package1 testPack1;
	testPack1.cboxDevid = 0;
	testPack1.soh    = ABOX_SEND_CBOX;
	testPack1.reg = SEND_END;
	testPack1.cmd 			= TESTCMD1;
	testPack1.Abox_dev_id	= Cdma_Info.dev_id;

    tx_data(&testPack1,sizeof(testPack1));
//at_printf("send pack1\r\n");

}


/* testPack3发送 */
static void sendTestPack3(rt_uint32_t cboxDevid)
{
	test_package3 testPack3;
	testPack3.cboxDevid = 0;
	testPack3.soh    	= ABOX_SEND_CBOX;
	testPack3.reg 	 	= SEND_END;
	testPack3.cmd 	 	= TESTCMD3;
	testPack3.cboxNum	= aboxInfo.cboxTotalInfo.cboxOnlineNum;
	testPack3.Cbox_dev_id = cboxDevid;

    tx_data(&testPack3,sizeof(testPack3));
//	at_printf("send pack3\r\n");
}


/* Initializes a single Cbox message. */
void initCboxInfo(cbox_information *cboxInfo_t)

{
	if(cboxInfo_t)
	{
		 /* 发送包的序列数 */
		cboxInfo_t->packSendInfo.aboxPackNum = 0;
		cboxInfo_t->packSendInfo.cboxPackNum = 0;
		
		/* 统计Cbox  出错情况 */
		cboxInfo_t->cboxAssessReport.packTotal = 0;
		cboxInfo_t->cboxAssessReport.packErr   = 0;
		cboxInfo_t->cboxAssessReport.packSendErr = 0;
		cboxInfo_t->cboxAssessReport.packSendNum = 0;
		cboxInfo_t->cboxAssessReport.errTick1 = 0;
		cboxInfo_t->cboxAssessReport.errTick2 = 0;

		/* 对应Cbox下 来自服务器的数据 */
		cboxInfo_t->cboxDataInfo.entryNum = 0;	

		/* 存储来自cbox的subg信息 */
		cboxInfo_t->subgDataInfo.dataLength = 0;					   

	}
}


/* return cbox devid */
rt_uint32_t addCbox(test_package2 *testPack2_t)
{
	if(!testPack2_t) return 0;
	int i = 0;

	/* check for duplicate registrations */
	for(i = 0; i < aboxInfo.cboxTotalInfo.cboxOnlineNum; i++)
	{
		if(testPack2_t->p_dev_id[CBOX_DEVID] == 
			aboxInfo.cboxTotalInfo.cboxInfo[i].devidCollection[CBOX_DEVID])
		{
			at_printf("get same cbox: %d.\r\n",testPack2_t->p_dev_id[CBOX_DEVID] & 0x00ffffff);
			return testPack2_t->p_dev_id[CBOX_DEVID];
		}		
	}

	

	/* get the info ablout the end of cbox-list */
	cbox_information cboxInfo = aboxInfo.cboxTotalInfo.cboxInfo[aboxInfo.cboxTotalInfo.cboxOnlineNum];

	at_printf(" get cbox id:%d \r\n",testPack2_t->p_dev_id[CBOX_DEVID] & 0x00ffffff);

	/* init cboxinfo */
	for(i=CBOX_DEVID;i<DEVID_TYPE_NUM;i++)
	rt_memcpy(&cboxInfo.devidCollection[i],&testPack2_t->p_dev_id[i],4);

	initCboxInfo(&cboxInfo);

	aboxInfo.cboxTotalInfo.cboxInfo[aboxInfo.cboxTotalInfo.cboxOnlineNum] = cboxInfo;
	aboxInfo.cboxTotalInfo.cboxOnlineNum++;

	ser_heart();
	return cboxInfo.devidCollection[CBOX_DEVID];

}



rt_uint32_t recvTestPack2(test_package2 *testPack2_t)
{
	if( RT_NULL != testPack2_t 
	    && testPack2_t->cmd == TESTCMD2
	    && aboxInfo.cboxTotalInfo.cboxOnlineNum < CBOX_MAX_NUM)
	{
		
		return addCbox(testPack2_t);

	}

	return 0;
}



/* The test package is used to register the cbox.  */
void testPackFunc()
{
	if(aboxInfo.cboxTotalInfo.cboxOnlineNum < CBOX_MAX_NUM) 
	{
		rt_uint8_t  timeoutNum = 0;
		test_package2 testPack2;
		rt_uint32_t timeout    = ONCE_PACK_TIME_OUT;
		
		while(1)
		{
			sendTestPack1();
			rt_memset(&testPack2,0,sizeof(testPack2));
			
			if(RT_EOK == rx_data(&testPack2, sizeof(testPack2),ONCE_PACK_TIME*2))
			{	
				if(testPack2.cmd == TESTCMD2)
				{
					sendTestPack3(recvTestPack2(&testPack2));
					timeoutNum = 0;
				  	continue;
				}
				
			}
			else
				timeoutNum++;

			if(timeout > 1) break;
		}
	}
	 
}


/********************************TEST_PACK_END**********************************/



/********************************TRAVER_PACK**********************************/
void txDataResult(cbox_assessment_report *cboxReport_t,rt_uint8_t statusSend)
{
	if(!cboxReport_t) return;
	switch(statusSend)
	{
		case SEND_RESULT_DATA:
		   aboxInfo.packageInfo.packageSendNum++;
		   cboxReport_t->packTotal++;
		   cboxReport_t->packSendNum++;
		   break;

		case SEND_RESULT_FAIL:
			cboxReport_t->packErr++;
			cboxReport_t->packSendErr++;
			
		default:
			break;
	}

}


/* return The length of the existing data */
static rt_uint32_t processExistingData(cbox_information *cboxInfo_t,rt_uint8_t *saveBuff) 
{
	if(!cboxInfo_t || !saveBuff) return 0;
	if(cboxInfo_t->subgDataInfo.dataLength)
	{
		if(cboxInfo_t->subgDataInfo.dataAddr >= SUBGDATAPOOLSIZE) return 0;

		rt_memset(saveBuff,0,BUFF_LEN);
		if(RT_EOK == ReadPool(aboxInfo.subgDataPool,
						  	  cboxInfo_t->subgDataInfo.dataAddr,
						  	  cboxInfo_t->subgDataInfo.dataLength,
						  	  saveBuff))
		{
			rt_uint8_t index = 0;
			rt_uint32_t saveLen = cboxInfo_t->subgDataInfo.dataAddr;
			/* 在这个地址之后保存的数据地址均需要左移 */
			for(index = 0;index < aboxInfo.cboxTotalInfo.cboxOnlineNum;index++)
			{
				if(aboxInfo.cboxTotalInfo.cboxInfo[index].subgDataInfo.dataLength)
				{
					if(aboxInfo.cboxTotalInfo.cboxInfo[index].subgDataInfo.dataAddr 
						> cboxInfo_t->subgDataInfo.dataAddr)
					aboxInfo.cboxTotalInfo.cboxInfo[index].subgDataInfo.dataAddr 
						-=  cboxInfo_t->subgDataInfo.dataAddr;

				}

			}

			cboxInfo_t->subgDataInfo.dataAddr   = 0;
			cboxInfo_t->subgDataInfo.dataLength = 0;

			return saveLen;
		}
	}
	return 0;				  
}

static rt_err_t writeDataInfo(pool_setting *poolSetting,void *addBuff,
							  uint16_t writeSize,data_info *dataInfo_t)
{
	if(!poolSetting || !addBuff || !writeSize || !dataInfo_t) return RT_ERROR;

	dataInfo_t->dataAddr = WritePool(poolSetting,addBuff,writeSize);
	if(dataInfo_t->dataAddr < 0)
	{
		dataInfo_t->dataAddr = 0;
		dataInfo_t->dataLength = 0;
		at_printf(" write data pool is error!\r\n ");
		return RT_ERROR;
	}
	else
		dataInfo_t->dataLength = writeSize;

	return RT_EOK;

}



void insetCboxHeadData(data_info *addDataInfo,cbox_information *cboxInfo_t)
{
	if(!addDataInfo || !cboxInfo_t) return;

	if(CBOX_MAX_DATA_LIST >= cboxInfo_t->cboxDataInfo.entryNum)
	{
		at_printf("insert Cbox list.\r\n");
	
		if(CBOX_MAX_DATA_LIST == cboxInfo_t->cboxDataInfo.entryNum)
			cboxInfo_t->cboxDataInfo.entryNum--;
	
		int index = cboxInfo_t->cboxDataInfo.entryNum;
		while(index--)
		{
			*(cboxInfo_t->cboxDataInfo.cboxDataList+index+1) =	
				*(cboxInfo_t->cboxDataInfo.cboxDataList+index);	
		}
		rt_memcpy(&cboxInfo_t->cboxDataInfo.cboxDataList[0],addDataInfo,sizeof(data_info));

		cboxInfo_t->cboxDataInfo.entryNum++;
	}

}


/* 发送数据包询问 */
//static int packnum;
static void  sendCheckPack(rt_uint8_t *send,rt_uint8_t cboxIndex,rt_uint32_t sendSize)
{
	if(!send) return ;
	cbox_information *cboxInfo_t =  &aboxInfo.cboxTotalInfo.cboxInfo[cboxIndex];

	check_package1 checkPack1;
	check_package2 checkPack2;
	check_package3 checkPack3;
	rt_uint8_t dataLengthMax = payload_length - sizeof(check_package1);

	rt_uint8_t subgSendLength;
	char subgRecv[payload_length];
	char subgSend[payload_length];


	rt_uint8_t cboxRecv[BUFF_LEN];
	rt_uint32_t cboxRecvSize = 0;
	rt_memset(cboxRecv,0,BUFF_LEN);

	rt_uint8_t errTimes = 0;
	rt_err_t ret = RT_EOK;


	/* pack checkpack1 */
	checkPack1.cboxDevid = cboxInfo_t->devidCollection[CBOX_DEVID];
	checkPack1.soh = ABOX_SEND_CBOX;
	checkPack1.cmd = CHECK_CMD1;
	cboxInfo_t->packSendInfo.aboxPackNum++;
	checkPack1.aboxPackNum = cboxInfo_t->packSendInfo.aboxPackNum;

	/* Previously received data. */
	cboxRecvSize = processExistingData(cboxInfo_t,cboxRecv); 
	
	
	while(1)
	{
		
		/* send a package */
		checkPack1.lenth = 0;
		checkPack1.reg = SEND_END;
		
		if(sendSize)
		{
			if(sendSize > dataLengthMax)
			{
				checkPack1.lenth = dataLengthMax;
				checkPack1.reg   = SEND_KEEP;
			}
			else
			{
				checkPack1.lenth = sendSize;
				checkPack1.reg   = SEND_END;
			}
			
		}

		rt_memset(subgSend,0,payload_length);
		rt_memcpy(subgSend,&checkPack1,sizeof(checkPack1));
		rt_memcpy(subgSend+sizeof(checkPack1),send,checkPack1.lenth);

		ret = RT_ERROR;
		errTimes = 0;
		subgSendLength = checkPack1.lenth+sizeof(checkPack1); 
		/* receive a package */
		while(1)
		{

			tx_data(subgSend,subgSendLength);
			txDataResult(&cboxInfo_t->cboxAssessReport,SEND_RESULT_DATA);	

//			if(checkPack1.lenth) packnum++;

			rt_memset(subgRecv,0,payload_length);
			if(RT_EOK == rx_data(subgRecv, payload_length,ONCE_PACK_TIME_OUT*2))
			{			
				rt_memcpy(&checkPack2,subgRecv,sizeof(checkPack2));
				switch(checkPack2.cmd)
				{
					case CHECK_CMD2:
					{						

						rt_memcpy(&checkPack2,subgRecv,sizeof(checkPack2));
						if((BUFF_LEN >= (cboxRecvSize+checkPack2.lenth)) && checkPack2.lenth)
						{
							rt_memcpy(cboxRecv+cboxRecvSize,subgRecv+sizeof(check_package2),checkPack2.lenth);
							cboxRecvSize += checkPack2.lenth;							
						}
						ret = RT_EOK;
					}	
					break;

					case CHECK_CMD3:
					{
				//at_printf("recv CHECK_CMD3 \r\n");
						rt_memcpy(&checkPack3,subgRecv,sizeof(checkPack3));
						rt_memcpy(cboxInfo_t->devidCollection,checkPack3.p_dev_id,
									sizeof(checkPack3.p_dev_id[0])*DEVID_TYPE_NUM);
						ret = RT_EOK;
					}
					break;
					
					default:
						break;
				}

				if(RT_EOK == ret)
				{
					txDataResult(&cboxInfo_t->cboxAssessReport,SEND_RESULT_SUCCESS);
					break;
				}
#if 0
				if(packnum % 3)
				{			
					if(RT_EOK == ret)
					{
						txDataResult(&cboxInfo_t->cboxAssessReport,SEND_RESULT_SUCCESS);
						break;
					}
				}
#endif	
			}

#if 0
			if((!(packnum % 3))&& ((cboxRecvSize) || (sendSize))) 
			{
				at_printf("send fail pack!\r\n",cboxRecvSize);
				cboxInfo_t->packSendInfo.aboxPackNum++;
	        	checkPack1.aboxPackNum = cboxInfo_t->packSendInfo.aboxPackNum; 
				ret = RT_ERROR;
				break;
			}
#endif				

			txDataResult(&cboxInfo_t->cboxAssessReport,SEND_RESULT_FAIL);
			errTimes++;
			if(errTimes >10)
			{
				if((cboxInfo_t->devidCollection[CBOX_DEVID]& 0x00ffffff) == 116)
			    at_printf("fail cbox = %d \r\n",cboxInfo_t->devidCollection[CBOX_DEVID]& 0x00ffffff);
				ret = RT_ERROR;
				break;
			}
			
		}

	   checkDataFromSubg((char *)cboxRecv,&cboxRecvSize);

		//send OK
		if((SEND_END == checkPack1.reg) && (SEND_END == checkPack2.reg) && RT_EOK == ret) 
		{
			cboxInfo_t->cboxAssessReport.errTick1 = rt_tick_get();
			cboxInfo_t->cboxAssessReport.errTick2 = rt_tick_get();	
			break;
		}

		//send again
	    if(RT_EOK == ret)
	    {
			/* clear data */
	   		data_left(send,checkPack1.lenth,BUFF_LEN);
			sendSize -= checkPack1.lenth;

			cboxInfo_t->packSendInfo.aboxPackNum++;
	        checkPack1.aboxPackNum = cboxInfo_t->packSendInfo.aboxPackNum;

			continue;
	    }	
	   else
	   {

	   	//send error
	   		if(!cboxInfo_t->cboxAssessReport.errTick1)
			{
				cboxInfo_t->cboxAssessReport.errTick1 = rt_tick_get();
			    cboxInfo_t->cboxAssessReport.errTick2 = rt_tick_get();	
			}
			else
				cboxInfo_t->cboxAssessReport.errTick2 = rt_tick_get();	

			/* save data */
			if(cboxRecvSize)
			{
				at_printf("save cboxRecv len = %d\r\n",cboxRecvSize);
				/* save recv Cbox data */
				writeDataInfo(aboxInfo.subgDataPool,cboxRecv, cboxRecvSize,&cboxInfo_t->subgDataInfo);
			}
			
			if(sendSize)
			{
				/* save Abox's sending data */
				data_info dataTemp;
				if(RT_EOK == writeDataInfo(aboxInfo.cboxDataPool,send,sendSize,&dataTemp))
				{
					at_printf("write data len = %d\r\n",dataTemp.dataLength);
					insetCboxHeadData(&dataTemp,cboxInfo_t);
				}

			}

			break;

	   }

	}

}



/* 返回保存数据的长度 */
static rt_uint32_t getPoolDate(rt_uint8_t *saveBuf,rt_uint8_t cboxIndex)
{
	if(!saveBuf) return 0;

	cbox_data_info *cboxInfo_t= &aboxInfo.cboxTotalInfo.cboxInfo[cboxIndex].cboxDataInfo; 
	rt_memset(saveBuf,0,BUFF_LEN);
	
	//NULL data
	if(!cboxInfo_t->entryNum) return 0;

at_printf("data get entryNum = %d\r\n",cboxInfo_t->entryNum);

	
	if(RT_EOK == ReadPool(aboxInfo.cboxDataPool,
						  cboxInfo_t->cboxDataList[0].dataAddr,
						  cboxInfo_t->cboxDataList[0].dataLength,
						  saveBuf))
	{
	
	//at_printf("receive a data OK!\r\n",cboxInfo_t->entryNum);

		rt_uint8_t  index  = 0;
		rt_uint8_t  j      = 0;
		rt_uint32_t bufLen = cboxInfo_t->cboxDataList[0].dataLength;
		
		/* 在这个地址之后保存的数据地址均需要左移 */
		for(index = 0;index < aboxInfo.cboxTotalInfo.cboxOnlineNum;index++)
		{
			for(j = 0; j < aboxInfo.cboxTotalInfo.cboxInfo[index].cboxDataInfo.entryNum; j++)
			{
				if(aboxInfo.cboxTotalInfo.cboxInfo[index].cboxDataInfo.cboxDataList[j].dataAddr
					> cboxInfo_t->cboxDataList[0].dataAddr)
				{
					aboxInfo.cboxTotalInfo.cboxInfo[index].cboxDataInfo.cboxDataList[j].dataAddr 
						-= cboxInfo_t->cboxDataList[0].dataLength;
				}

			}
		}

		/* 该盒子的数据表左移 */
		rt_memcpy(&cboxInfo_t->cboxDataList[0],&cboxInfo_t->cboxDataList[1],
			sizeof(data_info)*(cboxInfo_t->entryNum-1));

		cboxInfo_t->entryNum--;
		return bufLen;
	}

	at_printf("recv a data err!addr:%d len:%d \r\n",
					cboxInfo_t->cboxDataList[0].dataAddr,
					cboxInfo_t->cboxDataList[0].dataLength);
	cboxInfo_t->entryNum--;
	return 0;
}


/* 遍历Cbox */
void traverseCbox()
{
	rt_uint8_t cboxIndex = 0;
	rt_uint8_t getData[BUFF_LEN];
	rt_uint32_t dataLen = 0;

	stPackCmd *packcmd = (stPackCmd *)getData;
	
	for(cboxIndex = 0;cboxIndex < aboxInfo.cboxTotalInfo.cboxOnlineNum;cboxIndex++)
	{	
		rt_memset(getData,0,BUFF_LEN);
		dataLen = getPoolDate(getData,cboxIndex);
		if(dataLen)
		{
			at_printf(" cmd = 0x%x ,len = %d\r\n ",packcmd->cmd,dataLen);
/*			
at_printf("\r\n");
at_printf("get pack : \r\n");
int j = 0;
for(;j<dataLen;j++)
{
	at_printf(" %x ",getData[j]);
}
at_printf("\r\n");
*/		
		}
		
		sendCheckPack(getData,cboxIndex,dataLen);
	}


}



/********************************TRAVER_PACK_END**********************************/








/********************************ASSESS_CBOX**********************************/


/* 入参是索引(下标) */
void removeCbox(rt_uint8_t removeIndex)
{
	if(removeIndex >= aboxInfo.cboxTotalInfo.cboxOnlineNum) return;
	rt_uint8_t tempBuff[BUFF_LEN];
	at_printf("remove box index:%d\r\n",removeIndex);
	
	/* clean  subgDataInfo */
	while(aboxInfo.cboxTotalInfo.cboxInfo[removeIndex].subgDataInfo.dataLength)
	processExistingData(&aboxInfo.cboxTotalInfo.cboxInfo[removeIndex],tempBuff);

	/* clean cboxData */
	while(aboxInfo.cboxTotalInfo.cboxInfo[removeIndex].cboxDataInfo.entryNum)
	getPoolDate(tempBuff,removeIndex);

	/* remove cbox */
	rt_uint8_t i = 0;
	aboxInfo.cboxTotalInfo.cboxOnlineNum--;
	for(i = removeIndex; i < aboxInfo.cboxTotalInfo.cboxOnlineNum; i++)
	{
		aboxInfo.cboxTotalInfo.cboxInfo[i] = aboxInfo.cboxTotalInfo.cboxInfo[i+1];
	}
	initCboxInfo(&aboxInfo.cboxTotalInfo.cboxInfo[i]);

	ser_heart();
}





/* 超过80%出错率 或者 连续5s出错，删除Cbox */
#define CBOX_ERR_PERCENT     80
#define CONTINUE_ERROR_PACK  10  //1W包 50s  1K包 5s -- 10个大包
#define GET_ERR_TIMEOUT      POLL_TIME_OUT 
void assessCboxState()
{
	char i = 0;
//	rt_uint16_t j = 0;
//	rt_uint8_t  k = 0;

	rt_uint32_t cboxOnlineNum =  aboxInfo.cboxTotalInfo.cboxOnlineNum;	
	cbox_assessment_report cboxInfoReport;		
//	rt_uint32_t cboxRecvErrNum = 0;
	
	for(;i<cboxOnlineNum;i++)
	{
		cboxInfoReport = aboxInfo.cboxTotalInfo.cboxInfo[i].cboxAssessReport;
		
		if((cboxInfoReport.packSendNum == cboxInfoReport.packSendErr) 
			&& (cboxInfoReport.packSendNum > 10) 
			&& (cboxInfoReport.packSendNum < 20))
		{
		//	at_printf("init dev ID Err!\r\n");
			removeCbox(i);
			i--;
			continue;
		}

		
#if 1	
		if(cboxInfoReport.packSendNum < cboxInfoReport.packSendErr)
		{
			cboxInfoReport.packSendNum = 0 ;
			cboxInfoReport.packSendErr = 0;	
		}
		else
		{
			if(cboxInfoReport.packSendNum > PACKAGE_COUNT_START_NUM)
			{
				if((cboxInfoReport.packSendErr * 100 /cboxInfoReport.packSendNum) >  PACKAGE_COUNT_CRITICAL_VALUE)
				{
					at_printf(" packErr : %d,%d \r\n",cboxInfoReport.packSendErr,cboxInfoReport.packSendNum);
					removeCbox(i);
					i--;
					continue;
				}

			}

			if(cboxInfoReport.packSendNum > PACKAGE_COUNT_START_MAX_NUM)
			{
				cboxInfoReport.packSendNum = 0 ;
				cboxInfoReport.packSendErr = 0;	
			}
		}

#endif

	
#if 1	
		if(cboxInfoReport.errTick2 < cboxInfoReport.errTick1)
		{
			cboxInfoReport.errTick1 = rt_tick_get();	
			cboxInfoReport.errTick2 = rt_tick_get();	
		}
		else if((cboxInfoReport.errTick2 -cboxInfoReport.errTick1) > GET_ERR_TIMEOUT)
		{
			at_printf(" timmeout : %d \r\n",(cboxInfoReport.errTick2 - cboxInfoReport.errTick1));
			removeCbox(i);
			i--;
			continue;
		}


#endif

		

		
	}
}

/********************************ASSESS_CBOX_END**********************************/


#define ABOX_DETERMIN_SENDNUM 10000
void determineAboxState()
{
   static rt_uint8_t mark= 0;

   while((Cdma_Info.link != CONNECT_SERVER ) ||  
   		 (Cdma_Info.AT_status == AT_SER_UPDATA) || (Cdma_Info.AT_status == AT_YMODEM_UPDATA))
   {
       mark = 1;
	   rt_thread_delay(50);
   }

   if(mark)
   {
   	   mark = 0;
	   sendFreqPack();
   }


   rt_uint32_t recved = 0;
   if(RT_EOK == rt_event_recv(aboxInfo.aboxEvent, 
					 COM_CHANGE_FREQ_ET | SER_CHANGE_FREQ_ET,
					 RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR,
					 RT_WAITING_NO, 
					 &recved))

   {
	   if(recved & COM_CHANGE_FREQ_ET)
	   {
		   	dicInfo.fifthDicInfo.freq_num = Cdma_Info.freq_num;
			at_printf("aboxInfo.freqInfo.preFreq = %d\r\n",Cdma_Info.freq_num);   

			/* boot subg */
			rt_memcpy(aboxInfo.filterInfo.filterBuf,&Cdma_Info.dev_id,sizeof(FILETER_LENGTH));
			aboxInfo.filterInfo.filterMark = SUBG_FILTER_OPEN;
			changeSubgFillter(&aboxInfo.filterInfo);
	   }

	   if(recved & SER_CHANGE_FREQ_ET)
	   {
		   chooseAboxSubgFreq(aboxInfo.freqInfo.preFreq);
	   }
	   
	   

   }

}





/**
 * This function contains Abox initialization information.
 *
 * @param void
 *
 * @return void
 *
 */
void rt_sub_Abox_init_thread_entry(void* parameter)
{
	initAboxInformation();

	initAboxThreadInformation();

	chooseAboxSubgFreq(0);

	checkSubgInfomation();

	while(1)
	{

		determineAboxState();

		testPackFunc();

		traverseCbox();

		assessCboxState();

		rt_thread_yield();
						
		
	}
	
}


/**
 * This function will start the subg Abox thread.
 *
 * @param void
 *
 * @return void
 *
 */
void subg_Abox_init(void)
{
	rt_thread_t tid;

    tid = rt_thread_create("sub_A",
							rt_sub_Abox_init_thread_entry, RT_NULL,
							1024*4,SUB_A_PRI, 20);

    if (tid != RT_NULL)
        rt_thread_startup(tid);

    return ;	

}

