/*
 * board.h - CC3100-STM32F4 platform configuration functions
 *
 * Copyright (C) 2014 Texas Instruments Incorporated - http://www.ti.com/ 
 * 
 * 
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the   
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

#ifndef _NET_CONFIG_H
#define _NET_CONFIG_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

//#include "stm32f4_discovery.h"
#include "rtthread.h"
#include "ctrl.h"

/************* Abox 网络配置 ************/

/* The events needed by the Abox's program */
#define TCP_CLI_ABOX	  (1<<3)  //start Abox's eth
#define TCP_CLI_WIFI	  (1<<4)  //start WIFI mode
#define TCP_CLI_ETH       (1<<5)  //start ETH  mode



#define SERVER_DEFAULT_NUM  1
#define SERVER_WRITE_NUM    4
#define SERBER_NUM_MAX      (SERVER_DEFAULT_NUM + SERVER_WRITE_NUM)     //装载服务器的数量

#define READ_CLI_TIMEOUT_S 60 //60s timeout	
#define RECONNECT_TIMES 10

#define WIFI_NAME_MAX     24
#define WIFI_PASSWORD_MAX 24

#ifndef FALSE
#define FALSE       (0)
#endif

#ifndef TRUE
#define TRUE        (!FALSE)
#endif



/* Select the client type */
typedef enum
{
	DHCP_OPEN,    //动态连接
	DHCP_CLOSE,		//静态连接
}e_clientConnectStatus;  //客户端的连接方式 动态或静态连接

typedef enum 
{
	//连接方式      1:eth 2：wifi 3:eth wifi 其他: 默认 eth 动态连接配置
	ETH_STYLE = 1,     //eth connect
	WIFI_STYLE = 2,	   //wifi connect
	ETH_WIFI_STYLE = 3,
}e_connectMothod;

typedef enum 
{
	//当前连接的状态
	NULL_DISCONNENCT = 0,
	CLIENT_WIFI_CONNECT = 1,
	CLIENT_ETH_CONNECT = 2,
}e_currentConnectStyle;




/* 网站信息配置 */
typedef struct  _net_infor
{
	char				serport[8];					//服务器端口 		8888
	char				seraddr[16];				//服务器地址 	
}net_info;

/* 本机IP地址配置 */
typedef struct _net_addr_config
{
	char				ipaddr[16];	        //IP地址     		192.168.1.3
	char				ipmaskaddr[16];     //MASK       		255.255.255.255
	char				ipgatwayaddr[16];   //GATWAY     		192.168.1.1
}net_addr_config; 

/* 以太网连接的网络配置 */
typedef struct _con_eth_config
{
	e_clientConnectStatus  status; //0:动态配置 1:静态配置 
	net_addr_config	       netAddrConfig;	
}con_eth_config;

/* wifi 连接的网络配置 */
typedef struct _con_wifi_config
{
	//e_clientConnectStatus  status; //0:动态配置 1:静态配置 
	//net_addr_config 	   netAddrConfig;	
	char 				   wifiName[WIFI_NAME_MAX];
	char 				   wifiPassword[WIFI_PASSWORD_MAX];

}con_wifi_config;

/* 连接服务器的配置信息 */
typedef struct _server_connect_config
{
	e_connectMothod 		configStyle;		//连接方式 0：无连接 1:eth 2：wifi 3:eth or wifi
	e_currentConnectStyle 	currentConnectStyle;//当前连接 0: 无连接 1：wifi  2: eth
	
	con_eth_config ethConfig;
	con_wifi_config wifiConfig;
}ser_con_config;

/* 跟服务器相关的网络信息 */
typedef struct _serverNet_information
{
	/* 连接网站的配置信息 */
	int 					serverNetNum;			//服务器网站存储的条数
	net_info 				netInfo[SERBER_NUM_MAX]; 	//每个服务器存储信息

	ser_con_config netConfig;
}serverNet_information;
/************* end ************/


extern rt_uint8_t        Eth_Rev_Buff [BUFF_LEN*2];
extern rt_uint16_t       Eth_recv_len;
extern serverNet_information serNetConfig;
extern rt_event_t cliEvent;// creat and delete
extern rt_mutex_t cliMutex;


/* control server information. */
void initServerInfo(void);
void changeServerInfo(void);
void writeServerInfo(serverNet_information *writeInfo);
void readServerInfo(serverNet_information *readInfo);
void entryEthStatus(void);
void exitEthStatus(void);



/* CC3100 */
typedef void (*P_EVENT_HANDLER)(void* pValue);
void CC3100_nHIB_init(void);
void CC3100_enable(void);
void CC3100_disable(void);
void CC3100_InterruptEnable(void);
void CC3100_InterruptDisable(void);
int registerInterruptHandler(P_EVENT_HANDLER InterruptHdl , void* pValue);
void Delay(unsigned long delay);
void initializeWifiCC3100(void);
void quitCC3100Tcp(void);
int sendCC3100Data(rt_uint8_t *sendBuf,rt_uint32_t len);
void wifiStyleStart(void);



/* client */
rt_err_t returnServerLinkStatus(void);
void processDataFromServer(void);
void initializeEth(void);
rt_err_t judgeWifiSendStatus(void);
rt_err_t judgeEthSendStatus(void);
e_clientConnectStatus returnConnectConfig(e_currentConnectStyle connectStyle);
e_connectMothod returnConfigLinkMothod(void);
void quitEthernetTcp(void);
int sendEthernetData(rt_uint8_t *sendBuf,rt_uint32_t len);
void ethStyleStart(void);
void quitTcpConnect(void);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* _BOARD_H */
