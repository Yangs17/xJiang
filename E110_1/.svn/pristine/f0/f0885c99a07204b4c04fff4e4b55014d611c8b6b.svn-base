/*
 * File      : stm32_usbh.c
 * This file is part of RT-Thread RTOS
 * COPYRIGHT (C) 2015, RT-Thread Development Team
 *
 * The license and distribution terms for this file may be
 * found in the file LICENSE in this distribution or at
 * http://www.rt-thread.org/license/LICENSE
 *
 * Change Logs:
 * Date           Author            Notes
 * 2017-10-30     ZYH            the first version
 */
#include "drv_usbh.h"

#include <rtdevice.h>
#include "board.h"

#include <stm32f4xx.h>
 
//#include "ctrl.h" 
#include "ff.h"  
#include "exfuns.h"    
#include "usbh_usr.h" 
#include <usbh_core.h>
#include <usb_core.h>
#include "abox.h"
USBH_HOST  USB_Host;
USB_OTG_CORE_HANDLE  USB_OTG_Core;
usbh_info usbhInfo; 


#define  APP_PROGRAM  "2:/modInfo/est.bin"
#define  NET_SETTING  "2:/modInfo/net.txt"

/*****************
DHCP mode:1        //0 disconnect  1静态   2动态
IP address:192.168.2.111
msak address:255.255.255.0
gateway address:192.168.2.1
******************/


/***********
cbuf : check buf
bsize: check length
ch   : searched character
sbuf : save subscript's buf

return: if 0  NULL
***********/
int searchCharacter(char *cbuf,int bsize,char ch,rt_uint32_t *sbuf)
{
	if(!cbuf || !sbuf) return -1;
	
	int i = 0;
	int j = 0;
	for(i=0;i<bsize;i++)
	{
		if(cbuf[i] == ch)
		{	
			sbuf[j] = i;
			j++;
		}
	}

	return j ;
	
}

/* clear buff */
void clearStrInfo(char *str,rt_uint16_t strLen)
{
	if(!str) return;
	rt_uint16_t i = 0;
	for(i=0;i<strLen;i++)
	{
		if((str[i] <'0' || str[i] >'9') && str[i] != '.')
			str[i] = 0;
	}
	
}


/* read net file and set file's config */
rt_err_t readNetSet(FIL *file)
{
	if(!file) return RT_ERROR;
	if(!file->fsize  || file->fsize > USB_BUF_LEN) return RT_ERROR;

	f_lseek(file,0);
	rt_memset(usbhInfo.buff,0,USB_BUF_LEN);
	usbhInfo.blen = 0;

	/* get usb set infomation.*/
	f_read(file,usbhInfo.buff,(unsigned int)file->fsize,&usbhInfo.blen);
	if(usbhInfo.blen)
	{
		rt_uint32_t k[10] = {0};
		if(!searchCharacter(usbhInfo.buff,file->fsize,SEPARATOR,k)) return RT_ERROR;

		rt_memcpy(&usbhInfo.netSetInfo.cliType,&usbhInfo.buff[k[0]+1],1);
		rt_memcpy(usbhInfo.netSetInfo.ipaddr,&usbhInfo.buff[k[1]+1],16);
		rt_memcpy(usbhInfo.netSetInfo.ipmaskaddr,&usbhInfo.buff[k[2]+1],16);
		rt_memcpy(usbhInfo.netSetInfo.ipgatwayaddr,&usbhInfo.buff[k[3]+1],16);

		clearStrInfo(&usbhInfo.netSetInfo.cliType,1);
		clearStrInfo(usbhInfo.netSetInfo.ipaddr,16);
		clearStrInfo(usbhInfo.netSetInfo.ipmaskaddr,16);
		clearStrInfo(usbhInfo.netSetInfo.ipgatwayaddr,16);
	} 


	switch(usbhInfo.netSetInfo.cliType)
	{
		case '1': //静态
			if((Cdma_Info.cli_type == STATIC_CON)
				&& (!rt_strcmp(usbhInfo.netSetInfo.ipaddr,Sys_Setup.ipaddr))
				&& (!rt_strcmp(usbhInfo.netSetInfo.ipmaskaddr,Sys_Setup.ipmaskaddr))
				&& (!rt_strcmp(usbhInfo.netSetInfo.ipgatwayaddr,Sys_Setup.ipgatwayaddr))
				)
				return RT_ERROR;

			/* save static configuration */
			Cdma_Info.cli_type = STATIC_CON;
			rt_memcpy(Sys_Setup.ipaddr,usbhInfo.netSetInfo.ipaddr,16);
			rt_memcpy(Sys_Setup.ipmaskaddr,usbhInfo.netSetInfo.ipmaskaddr,16);	
			rt_memcpy(Sys_Setup.ipgatwayaddr,usbhInfo.netSetInfo.ipgatwayaddr,16);
			SaveSetup(&Sys_Setup);
			
			break;

		case '2': //动态		
			if(Cdma_Info.cli_type == DYNAMIC_CON)
				return RT_ERROR;

			Cdma_Info.cli_type = DYNAMIC_CON;
			rt_memset(Sys_Setup.ipaddr,0,16);
			rt_memset(Sys_Setup.ipmaskaddr,0,16);
			rt_memset(Sys_Setup.ipgatwayaddr,0,16);
			SaveSetup(&Sys_Setup);

			break;

		default:
			return RT_ERROR;
	}

	return RT_EOK;

}



/*
	RT_EOK: 	updata is OK.
	RT_ERROR:   updata is error.
*/
rt_err_t updataSet(FIL *file)
{
	if(!file) return RT_ERROR;
	if(!file->fsize) return RT_ERROR;

	rt_uint32_t s_addr = UPDATA_APP_ADDR;
	rt_uint8_t  readTime = 1;
	
	f_lseek(file,0);
	rt_memset(usbhInfo.buff,0,USB_BUF_LEN);
	usbhInfo.blen = 0;

	while(HCD_IsDeviceConnected(&USB_OTG_Core))//设备连接成功
	{
		//IWDG_Feed();
		
		/* get usb_set infomation.*/
		f_read(file,usbhInfo.buff,USB_BUF_LEN,&usbhInfo.blen);

		/* file's head */
		if(readTime)
		{	
			readTime = 0;
			rt_uint32_t ver = 0;
			rt_memcpy(&ver,usbhInfo.buff+4*7,4);

			/* check version */
			if((ver >= APPF_VER_LOWER) && (ver < APPF_VER_CEILING))
			{
				clearSaveDataSector();
				//IWDG_Feed();
				writeByteToFlash(s_addr,(rt_uint8_t *)(&file->fsize),4);
				s_addr += 4;
				rt_kprintf("usb app get:%d \r\n",ver);
			}
			else
			{
				rt_kprintf("usb app ver is %d,it's not allowed.\r\n",ver);
				break;
			}
			
		}
		
		if(usbhInfo.blen)
		{
			writeByteToFlash(s_addr,(rt_uint8_t *)usbhInfo.buff,usbhInfo.blen);
			s_addr += usbhInfo.blen;
		}

		/* file's tail */
		if(usbhInfo.blen < USB_BUF_LEN)
		{
			wwdg_auto_close();
			return checkFlashFile();
		}

	}

	return RT_ERROR;

}

/* 1 connect 0 disconnect */
rt_uint32_t USB_ConnectStatus()
{
 	return	HCD_IsDeviceConnected(&USB_OTG_Core);
}



//用户测试主程序
//返回值:0,正常
//       1,有问题
/*****************
面对天线 从右往左 分别为 1 2 3 4 灯

插入U盘
1灯 常亮表示 程序烧写OK  长灭表示程序未烧写
2灯 常亮表示 net 烧写OK  长灭表示net未烧写
3 4灯长灭
*****************/
u8 USH_User_App(void)
{
	u32 total= 0,free= 0;
	u8 res=0;
	u8 ret = 0;
//	u32 bw = 0;	
	
    f_mount(fs[2],"2:",1); 	//重新挂载U盘
	res=exf_getfree("2:",&total,&free);
	if(res==0x0D)
	{
		// reset
		res=f_mkfs("2:",1,4096);//
	} 

	usbhInfo.netMark = DEFAULT_MARK;
	usbhInfo.appMark = DEFAULT_MARK;

	wwdg_auto_open();
	while(HCD_IsDeviceConnected(&USB_OTG_Core))//设备连接成功
	{	
		//IWDG_Feed();
		if(usbhInfo.netMark == DEFAULT_MARK || usbhInfo.appMark == DEFAULT_MARK)
		{
			/* net set */
			ret = f_open(file, NET_SETTING,FA_OPEN_EXISTING |FA_READ);
			if(ret  == FR_OK)
			{ 			
			 
				if(RT_EOK == readNetSet(file))
				{
					rt_kprintf("net set is OK!\r\n");
					if(Cdma_Info.cli_type == DYNAMIC_CON)
					rt_kprintf("Net set dynamic connect!\r\n");
					else if(Cdma_Info.cli_type == STATIC_CON)
					rt_kprintf("Net set static connect!\r\n");
					rt_kprintf("Save box IP address : %s\n\r",Sys_Setup.ipaddr);
					rt_kprintf("Save box mask address : %s\n\r",Sys_Setup.ipmaskaddr);
					rt_kprintf("Save box gateway address : %s\n\r",Sys_Setup.ipgatwayaddr);

					usbhInfo.netMark = NET_SET_OK;
				}
				else
				{	
					rt_kprintf("net set error!\r\n");
					usbhInfo.netMark = NET_SET_ERR;
				}

				f_close(file);
			}
			else
			{
				usbhInfo.netMark = NET_SET_ERR;
			}

			/* updata set */
			ret = f_open(file, APP_PROGRAM,FA_OPEN_EXISTING |FA_READ);
			if(ret  == FR_OK)
			{ 			
				if(RT_EOK == updataSet(file))
				{
					usbhInfo.appMark = APP_SET_OK;
				}		
				else
				{
					usbhInfo.appMark = APP_SET_ERR;
				}
					
				f_close(file);
			}
			else
			{
				usbhInfo.appMark = APP_SET_ERR;	
			}
			

		}		

		if(usbhInfo.netMark == NET_SET_OK)
			GPIO_ResetBits(LED_GAF, LED_CAN);//亮
		else
			GPIO_SetBits(LED_GAF, LED_CAN);//灭


		if(usbhInfo.appMark == APP_SET_OK)
			GPIO_ResetBits(LED_GAF, LED_BOX);
		else
			GPIO_SetBits(LED_GAF, LED_BOX);

		GPIO_SetBits(LED_GAF, LED_MON);
		GPIO_SetBits(LED_GAF, LED_ROOF);

		rt_thread_delay(50);
	}
	//rt_exit_critical();

	/*close file and filesystem*/
	f_mount(0, NULL,0); //delay mount
	f_mount(0,"2:",1); 	//卸载U盘

	if((usbhInfo.netMark == NET_SET_OK) || (usbhInfo.appMark == APP_SET_OK))
	{
		rt_kprintf("usb set is OK!\r\n");
		cmd_reboot();
	}

	wwdg_auto_close();
	return 1;
} 


void usbDefault()
{
	usbhInfo.netMark = DEFAULT_MARK;
	usbhInfo.appMark = DEFAULT_MARK;
	usbhInfo.blen    = 0;
	rt_memset(usbhInfo.buff, 0, USB_BUF_LEN);
}



void rt_usbDisk_thread_entry(void *parameter)
{
	usbDefault();
	exfuns_init();	
	//初始化USB主机
	USBH_Init(&USB_OTG_Core,USB_OTG_FS_CORE_ID,&USB_Host,&USBH_MSC_cb,&USR_Callbacks);  
	rt_thread_delay(2000);
	while(1)
	{
		USBH_Process(&USB_OTG_Core, &USB_Host);
	}	

}


int stm_usbh_register(void)
{
	
	rt_thread_t tid;
	tid = rt_thread_create("usbDisk",
						   rt_usbDisk_thread_entry, RT_NULL,
						   512*2, 0x11, 20);

	if (tid != RT_NULL) rt_thread_startup(tid);

    return RT_EOK;

}
INIT_DEVICE_EXPORT(stm_usbh_register);









